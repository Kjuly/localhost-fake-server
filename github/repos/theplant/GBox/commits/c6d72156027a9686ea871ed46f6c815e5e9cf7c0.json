{
  "commit": {
    "message": "Large change to the logic, only detect update on server, move all the finer detection into task handler.",
    "tree": {
      "sha": "d0b22f944e995b076ed32837e4dbd2fc58b87a54",
      "url": "https://api.github.com/repos/theplant/GBox/git/trees/d0b22f944e995b076ed32837e4dbd2fc58b87a54"
    },
    "author": {
      "date": "2011-08-24T02:38:07-07:00",
      "name": "Xiaoyi Chen",
      "email": "xiaoyi.chen@hotmail.com"
    },
    "committer": {
      "date": "2011-08-24T02:38:07-07:00",
      "name": "Xiaoyi Chen",
      "email": "xiaoyi.chen@hotmail.com"
    },
    "url": "https://api.github.com/repos/theplant/GBox/git/commits/c6d72156027a9686ea871ed46f6c815e5e9cf7c0"
  },
  "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
  "author": {
    "avatar_url": "https://secure.gravatar.com/avatar/38eb4e6b823b7e406e11de34be7fe61d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "id": 877966,
    "url": "https://api.github.com/users/chenxiaoyi",
    "login": "chenxiaoyi"
  },
  "files": [
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 2,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBDataFacility.m",
      "filename": "GBox/GBDataFacility.m",
      "patch": "--- a/GBox/GBDataFacility.m\n+++ b/GBox/GBDataFacility.m\n@@ -89,13 +89,6 @@ static GBDataFacility* instance =nil;\n     [context release];\n }\n \n--(void)removePersistentStore{\n-    NSFileManager *fileManager = [NSFileManager defaultManager] ;\n-    if([fileManager fileExistsAtPath:[DB_storeURL path]]){\n-        [fileManager removeItemAtURL:DB_storeURL error:nil];\n-    }\n-}\n-\n // Initialize the Core Data persistence stack used by this tool.  This consists of a model, a persistent store coordinator, a managed object context, and a persistent store, all global.  Return YES on success, NO and an autoreleased NSError in *error on failure.\n \n -(BOOL) InitializeCoreDataStack:(NSError **)error {\n@@ -124,7 +117,6 @@ static GBDataFacility* instance =nil;\n     //Setup Persistent Store\n     \n     NSString * const kGB_DB_STORE_TYPE = NSXMLStoreType;\n-    static NSString * const kGB_DB_STORE_FILENAME = @\"gbdatamodel.xml\";\n     \n     DB_storeURL = [[GBUtility applicationLogDirectory] URLByAppendingPathComponent:kGB_DB_STORE_FILENAME];\n \n@@ -134,7 +126,7 @@ static GBDataFacility* instance =nil;\n                                                       options:nil\n                                                         error:error];\n     if(persistentStore==nil){\n-        [self removePersistentStore];\n+        [GBUtility removePersistentStore:DB_storeURL];\n         persistentStore = [coordinator addPersistentStoreWithType:kGB_DB_STORE_TYPE \n                                                     configuration:nil\n                                                               URL:DB_storeURL\n@@ -338,7 +330,7 @@ static GBDataFacility* instance =nil;\n \n -(void)clearData{\n     //Refresh Data\n-    [self removePersistentStore];\n+    [GBUtility removePersistentStore:DB_storeURL];\n \n     [context release];\n     [coordinator release];",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBDataFacility.m",
      "deletions": 10,
      "changes": 12
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBSyncController.h",
      "filename": "GBox/GBSyncController.h",
      "patch": "--- a/GBox/GBSyncController.h\n+++ b/GBox/GBSyncController.h\n@@ -23,7 +23,6 @@\n @interface GBSyncController : NSObject{\n @private\n     GBDocListData *docListData;\n-    GBFileManager *serverFileManager;\n     GBDataFacility *dataFacility;\n     GBTaskHandler* taskHandler;\n     GBCollectionManager *collectionManager;\n@@ -31,8 +30,6 @@\n     NSOperationQueue *opqueue;\n     NSTimeInterval globalInterval ;\n     \n-    NSDictionary * mLocalDic;\n-    NSDictionary * mServerDic;\t\n     NSMutableArray* repeatingTimers;\n     \n     NSUInteger bandwidthLimit;",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBSyncController.h",
      "deletions": 3,
      "changes": 3
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 8,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBSyncController.m",
      "filename": "GBox/GBSyncController.m",
      "patch": "--- a/GBox/GBSyncController.m\n+++ b/GBox/GBSyncController.m\n@@ -30,9 +30,6 @@\n -(void) docListFetchSucceed;\n -(void) fileCollectionManage;\n -(void) folderCollectionManage;\n--(void)downloadTimerFireMethod:(NSTimer *) theTimer;\n--(void)uploadTimerFireMethod:(NSTimer *) theTimer;\n--(void)downloadNoMD5TimerFireMethod:(NSTimer *) theTimer;\n -(void)syncTest;\n \n @end\n@@ -85,7 +82,7 @@\n \n -(void)beginSync{\n     \n-        NSTimer *timerForFetchChange = [NSTimer scheduledTimerWithTimeInterval:3.653\n+        NSTimer *timerForFetchChange = [NSTimer scheduledTimerWithTimeInterval:33.653\n                                                                         target:self\n                                                                       selector:@selector(fetchChange:)\n                                                                       userInfo:nil\n@@ -340,13 +337,14 @@ static GBSyncController * shareSyncController = nil;\n         }\n         \n         if(anyChangesNew){\n+            /*\n             //Because server change fetch use local file system info, thus this fetch is needed.\n             GBFileSystemInfo* fileSystemInfo = [GBFileSystemInfo sharedFileSystemInfo];\n             [fileSystemInfo setLocalInfoDic];   \n             NSDictionary *md5Paths = [fileSystemInfo md5PathsDic];\n             NSDictionary *identifierPaths = [fileSystemInfo identifierPathsDic];\n             NSDictionary *fileSysInfo = [fileSystemInfo localInfoDic];\n-            \n+            */\n             //largestChangestamp will not be updated, until the changeEntries is fetched successfully.\n             NSNumber *largestChangestamp = [userInfo objectForKey:kGBLargestChangestamp] ;\n             NSLog(@\"Largest changestamp: %@\",largestChangestamp);\n@@ -365,7 +363,7 @@ static GBSyncController * shareSyncController = nil;\n                 NSString* entryIdentifier = [entry identifier];\n                 \n                 //Ignore file created on web.\n-                if([entry MD5Checksum ]==nil){\n+                if((!isCollection)&&[entry MD5Checksum]==nil){\n                     [dataFacility insertEvent:entryChangestamp\n                                 withEventCode:kGBServerNoMD5FileExist\n                                      operandA:entryIdentifier\n@@ -406,65 +404,11 @@ static GBSyncController * shareSyncController = nil;\n                                               andOperandB:nil];\n                             }\n                             \n-                            \n                         }else{\n-                            \n-                            \n-                            NSSet* pathSet = [identifierPaths valueForKey:entryIdentifier];\n-                            if(pathSet!=nil && [pathSet count]!=0){\n-                                //File exist at local.\n-                                \n-                                //If not updated, check rename by filename & suggested filename\n-                                NSString* fileName = [entry filename];\n-                                NSString* suggestedFilename = [entry suggestedFilename];\n-                                if(fileName !=suggestedFilename){\n-                                    //The file is renamed.\n-                                    [dataFacility insertEvent:entryChangestamp\n-                                                withEventCode:kGBServerRename\n-                                                     operandA:entryIdentifier\n-                                                  andOperandB:nil];\n-                                    \n-                                }\n-                                \n-                                if(!isCollection){\n-                                     \n-                                    //Judge by md5 if file is updated.\n-                                    NSString* onePath = [pathSet anyObject];\n-                                    NSDictionary* fileInfo = [fileSysInfo valueForKey:onePath];\n-                                    NSString* md5 = [fileInfo valueForKey:kGBFileAttributeMD5];\n-                                    if(![[entry MD5Checksum] isEqualToString: md5]){\n-                                        \n-                                        [dataFacility insertEvent:entryChangestamp\n-                                                    withEventCode:kGBServerFileUpdated\n-                                                         operandA:entryIdentifier\n-                                                      andOperandB:nil];\n-                                        \n-                                    }\n-                                }\n-                                                    \n-                                //check collection. using set operation.\n-        \n-                                //NSSet *simplifiedPaths = [NSSet setW\n-                            }else{\n-                                //File not exist at local.\n-                                if(isCollection){\n-                                    NSLog(@\"Collection %@ added on server.\",entryTitle);\n-                                    [dataFacility insertEvent:entryChangestamp\n-                                                withEventCode:kGBServerNewCollection\n-                                                     operandA:entryIdentifier\n-                                                  andOperandB:nil];\n-                                    \n-                                    \n-                                }else{\n-                                    NSLog(@\"Doc entry %@ added on server.\",entryTitle);\n-                                    [dataFacility insertEvent:entryChangestamp\n-                                                withEventCode:kGBServerNewFile\n-                                                     operandA:entryIdentifier\n-                                                  andOperandB:nil];\n-                                }\n-                                \n-                            }//File exist at local or not\n-                            \n+                            [dataFacility insertEvent:entryChangestamp\n+                                        withEventCode:kGBServerFileUpdated\n+                                             operandA:entryIdentifier\n+                                          andOperandB:nil];\n                         }//If the entry is deleted.\n                         \n                     }//is Removed.",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBSyncController.m",
      "deletions": 64,
      "changes": 72
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 123,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBTaskHandler.m",
      "filename": "GBox/GBTaskHandler.m",
      "patch": "--- a/GBox/GBTaskHandler.m\n+++ b/GBox/GBTaskHandler.m\n@@ -74,6 +74,104 @@\n     return self;\n }\n \n+-(void)handleServerFileUpdated:(NSManagedObject*)taskMO{\n+    NSManagedObjectID *taskID = [taskMO objectID];\n+    [dataFacility setState:kGBStateExecuting ofTaskID:taskID];\n+    NSInteger eventCode = [[taskMO valueForKey:@\"eventCode\"] intValue];\n+    NSString *operandA = [taskMO valueForKey:@\"operandA\"];\n+    NSString *operandB = [taskMO valueForKey:@\"operandB\"];\n+    NSString* identifier = operandA;\n+    GDataEntryDocBase* entry = [docListData entryForIdentifier:operandA];\n+    BOOL isCollection = ([entry class]==[GDataEntryFolderDoc class])?YES:NO;\n+    NSString* entryTitle = [[entry title] stringValue];\n+    \n+    NSSet* pathSet = [localIdentifierDic valueForKey:identifier];\n+    if(pathSet!=nil && [pathSet count]!=0){\n+        //File exist at local.\n+        \n+        //If not updated, check rename by filename & suggested filename\n+        NSString* fileName = [entry filename];\n+        NSString* suggestedFilename = [entry suggestedFilename];\n+        if(![fileName isEqualToString: suggestedFilename]){\n+            //The file is renamed.\n+            NSString* identifier = operandA;\n+            NSSet* pathSet = [localIdentifierDic valueForKey:identifier];\n+            NSString* suggestedName = [[docListData docListFeed]entryForIdentifier:identifier];\n+            NSError * error = nil;\n+            for(NSString* path in pathSet){\n+                NSString * newPath =[NSString stringWithFormat:@\"%@/%@\", [path stringByDeletingLastPathComponent],suggestedName];\n+                [[NSFileManager defaultManager] moveItemAtPath:[GBUtility expandedPath: path]\n+                                                        toPath:[GBUtility expandedPath: newPath]\n+                                                         error:&error];\n+            }\n+            \n+            [dataFacility setState:kGBStateDone ofTaskID:[taskMO objectID]];\n+            [currentExecutingTasks removeObject:taskID];\n+        }\n+        /*\n+         if(!isCollection){\n+         \n+         //Judge by md5 if file is updated.\n+         NSString* onePath = [pathSet anyObject];\n+         NSDictionary* fileInfo = [localInfoDic valueForKey:onePath];\n+         NSString* md5 = [fileInfo valueForKey:kGBFileAttributeMD5];\n+         if(![[entry MD5Checksum] isEqualToString: md5]){\n+         \n+         [dataFacility insertEvent:entryChangestamp\n+         withEventCode:kGBServerFileUpdated\n+         operandA:entryIdentifier\n+         andOperandB:nil];\n+         \n+         }\n+         }\n+         */\n+        //check collection. using set operation.\n+        \n+        [dataFacility setState:kGBStateDone ofTaskID:[taskMO objectID]];\n+        [currentExecutingTasks removeObject:taskID];\n+    }else{\n+        //File not exist at local.\n+        if(isCollection){\n+            NSLog(@\"Collection %@ added on server.\",entryTitle);\n+            \n+            NSString* path = operandB;\n+            NSString* identifier = operandA;\n+            NSManagedObject* mo = [dataFacility fetchCollectionByIdentifier:identifier];\n+            NSArray* pathEntries = [mo valueForKey:@\"localPaths\"];\n+            \n+            for(NSManagedObject* pathMO in pathEntries){\n+                NSString* pathString = [pathMO valueForKey:@\"stringValue\"];\n+                \n+                if([localInfoDic objectForKey:pathString]==nil){\n+                    //The local directory is not exist\n+                    //[GBUtility createLocalFolderAtPath:[pathMO valueForKey:@\"stringValue\"]];\n+                    [GBUtility createLocalFolderAtPath: pathString];\n+                    [GBUtility setIdentifier:identifier forFileAtPath:pathString];\n+                }\n+                //If the local directory is exist, then nothing have to be done.\n+            }\n+            \n+            [dataFacility setState:kGBStateDone ofTaskID:[taskMO objectID]];\n+            [currentExecutingTasks removeObject:taskID];\n+            \n+            //Server New Collection.\n+            \n+        }else{\n+            //Server New File\n+            NSLog(@\"Doc entry %@ added on server.\",entryTitle);\n+            \n+            [NSTimer scheduledTimerWithTimeInterval:i\n+                                             target:self\n+                                           selector:@selector(downloadTimerFireMethod:)\n+                                           userInfo:taskMO\n+                                            repeats:NO];\n+            i=i+2;\n+            \n+        }\n+    }\n+\n+}\n+\n -(BOOL) handleTask:(NSManagedObject*) taskMO {    \n     NSManagedObjectID *taskID = [taskMO objectID];\n     [dataFacility setState:kGBStateExecuting ofTaskID:taskID];\n@@ -82,7 +180,10 @@\n     NSString *operandB = [taskMO valueForKey:@\"operandB\"];\n     switch(eventCode){\n \n-        case kGBServerFileUpdated:   \n+        case kGBServerFileUpdated:{\n+            [self handleServerFileUpdated:taskMO];\n+        }\n+            break;\n         case kGBServerNewFile:{ \n             \n             [NSTimer scheduledTimerWithTimeInterval:i\n@@ -408,38 +509,37 @@\n     NSManagedObjectID* taskID = [aNotification object];\n     NSManagedObject *taskMO = [dataFacility moForMOID:taskID];\n     NSInteger eventCode = [[taskMO valueForKey:@\"eventCode\"] intValue];\n-    if(eventCode==kGBServerNewFile){\n-        //Server new file\n-        NSString* identifier = [taskMO valueForKey:@\"operandA\"];\n-        \n-        NSManagedObject *mo = [dataFacility fetchDocEntryByIdentifier:identifier];\n-        \n-        NSString* pathAtRoot =[mo valueForKey:@\"title\"];\n-        \n-        [GBUtility setIdentifier:identifier forFileAtPath:pathAtRoot];\n+    //Server new file\n+    NSString* identifier = [taskMO valueForKey:@\"operandA\"];\n+    \n+    NSManagedObject *mo = [dataFacility fetchDocEntryByIdentifier:identifier];\n+    \n+    NSString* pathAtRoot =[mo valueForKey:@\"title\"];\n+    \n+    [GBUtility setIdentifier:identifier forFileAtPath:pathAtRoot];\n+    \n+    if([[mo valueForKey:@\"parentCollections\"] count]!=0){\n         \n-        if([[mo valueForKey:@\"parentCollections\"] count]!=0){\n-            \n-            for(NSManagedObject* moPath in [mo valueForKey:@\"localPaths\"]){\n-                if([moPath valueForKey:@\"stringValue\"]){\n-                    \n-                    [GBUtility createLocalFolderAtPath:[[moPath valueForKey:@\"stringValue\"] stringByDeletingLastPathComponent]];\n-                    \n-                    [GBUtility cpFileAt:pathAtRoot\n-                                     to:[moPath valueForKey:@\"stringValue\"]];\n-                    \n-                }\n+        for(NSManagedObject* moPath in [mo valueForKey:@\"localPaths\"]){\n+            if([moPath valueForKey:@\"stringValue\"]){\n+                \n+                [GBUtility createLocalFolderAtPath:[[moPath valueForKey:@\"stringValue\"] stringByDeletingLastPathComponent]];\n+                \n+                [GBUtility cpFileAt:pathAtRoot\n+                                 to:[moPath valueForKey:@\"stringValue\"]];\n                 \n             }\n-            [GBUtility removeFileAt:pathAtRoot];\n+            \n         }\n-        \n+        [GBUtility removeFileAt:pathAtRoot];\n     }\n+        \n     [currentExecutingTasks removeObject:taskID];\n     [dataFacility setState:kGBStateDone ofTaskID:taskID];\n }\n \n -(void)refresh{\n+    \n     fileSystemInfo = [GBFileSystemInfo sharedFileSystemInfo];\n     [fileSystemInfo setLocalInfoDic];\n     localInfoDic = [fileSystemInfo localInfoDic];",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBTaskHandler.m",
      "deletions": 23,
      "changes": 146
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 5,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBUtility.h",
      "filename": "GBox/GBUtility.h",
      "patch": "--- a/GBox/GBUtility.h\n+++ b/GBox/GBUtility.h\n@@ -60,6 +60,9 @@\n \n +(BOOL)recycleFileAtPath:(NSString*)originalPath;\n \n++(void)removePersistentStore:(NSURL*)DB_storeURL;\n+\n+\n @end\n \n \n@@ -97,4 +100,6 @@\n        pIndicator:(NSProgressIndicator *)progressIndicator\n          fileName:(NSString *)filename;\n - (id) getPI:(NSInteger)ID;\n+\n+\n @end",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBUtility.h",
      "deletions": 0,
      "changes": 5
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 7,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBUtility.m",
      "filename": "GBox/GBUtility.m",
      "patch": "--- a/GBox/GBUtility.m\n+++ b/GBox/GBUtility.m\n@@ -247,6 +247,13 @@ static NSUInteger sharedBandWidth = 0;\n         return nil;\n }\n \n++(void)removePersistentStore:(NSURL*)DB_storeURL{\n+    NSFileManager *fileManager = [NSFileManager defaultManager] ;\n+    if([fileManager fileExistsAtPath:[DB_storeURL path]]){\n+        [fileManager removeItemAtURL:DB_storeURL error:nil];\n+    }\n+}\n+\n +(BOOL) isNetworkActive{\n     /*\n     NSURL * urlto = [[NSURL alloc] initWithString:@\"http://www.google.com/\"] ;",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBUtility.m",
      "deletions": 0,
      "changes": 7
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 8,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBoxAppDelegate.m",
      "filename": "GBox/GBoxAppDelegate.m",
      "patch": "--- a/GBox/GBoxAppDelegate.m\n+++ b/GBox/GBoxAppDelegate.m\n@@ -25,6 +25,7 @@\n #import \"ASIHTTPRequest.h\"\n #import \"GBCrashReport.h\"\n #import \"GBFileSystemInfo.h\"\n+#import \"GBoxConstants.h\"\n \n @interface GBoxAppDelegate()\n \n@@ -145,11 +146,13 @@\n     if ([defaults boolForKey:kGBSetupFinished] == NO) {\n         [GBUtility displayAlert:@\"Welcome\" format:@\"Please login with your google account in preferences...\"];\n         [self appSetup: rootPath];\n+        \n         setupFinished = NO;\n         [defaults setValue:nil forKey:kGBLargestChangestamp];\n         [defaults synchronize];\n-    }else{\n-        [authController tryKeychainAuthenticaiton];\n+        \n+        NSURL* DB_storeURL = [[GBUtility applicationLogDirectory] URLByAppendingPathComponent:kGB_DB_STORE_FILENAME];\n+        [GBUtility removePersistentStore:DB_storeURL];\n     }\n \n \n@@ -393,6 +396,9 @@\n // the callbacks for GBNetworkStatusWatcherHandler\n - (void)networkConnected {\n     NSLog(@\"network Connected\");\n+    if(![authController isSignedIn]&&setupFinished==YES){\n+        [authController tryKeychainAuthenticaiton];\n+    }\n     //[syncController restartOpeartions];\n }\n ",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBoxAppDelegate.m",
      "deletions": 2,
      "changes": 10
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 1,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBoxConstants.h",
      "filename": "GBox/GBoxConstants.h",
      "patch": "--- a/GBox/GBoxConstants.h\n+++ b/GBox/GBoxConstants.h\n@@ -67,6 +67,7 @@ extern NSString* const kGBDownloadFinished;\n extern NSString* const kGBDownloadFailed;\n extern NSString* const kGBUploadFinished;\n extern NSString* const kGBUploadFailed;\n+extern NSString * const kGB_DB_STORE_FILENAME; \n \n \n extern NSString* const kGBACLEntryAdded;",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBoxConstants.h",
      "deletions": 0,
      "changes": 1
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 2,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBoxConstants.m",
      "filename": "GBox/GBoxConstants.m",
      "patch": "--- a/GBox/GBoxConstants.m\n+++ b/GBox/GBoxConstants.m\n@@ -49,6 +49,8 @@ NSString* const kGBNotFoundMarker = @\"notFoundMarker#9987dfewfvrtqd8765dfeef7834\n \n NSString* const kGBSetupFinished = @\"kGBSetupFinished\";\n \n+NSString * const kGB_DB_STORE_FILENAME = @\"gbdatamodel.xml\";\n+\n - (id)init\n {\n     self = [super init];",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/GBoxConstants.m",
      "deletions": 0,
      "changes": 2
    },
    {
      "status": "modified",
      "sha": "c6d72156027a9686ea871ed46f6c815e5e9cf7c0",
      "additions": 2,
      "blob_url": "https://github.com/theplant/GBox/blob/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/Source/HTTPFetcher/GTMHTTPFetcher.m",
      "filename": "GBox/Source/HTTPFetcher/GTMHTTPFetcher.m",
      "patch": "--- a/GBox/Source/HTTPFetcher/GTMHTTPFetcher.m\n+++ b/GBox/Source/HTTPFetcher/GTMHTTPFetcher.m\n@@ -312,7 +312,8 @@ const NSTimeInterval kDefaultMaxUploadRetryInterval = 60.0 * 10.;\n     runLoopModes = runLoopModes_;\n   }\n \n-  if ([runLoopModes count] == 0) {\n+    //if([runLoopModes count] == 0){   //This is the original code,but bug exist.\n+  if (runLoopModes==nil||[runLoopModes count] == 0) {\n \n     // if no run loop modes were specified, then we'll start the connection\n     // on the current run loop in the current mode",
      "raw_url": "https://github.com/theplant/GBox/raw/c6d72156027a9686ea871ed46f6c815e5e9cf7c0/GBox/Source/HTTPFetcher/GTMHTTPFetcher.m",
      "deletions": 1,
      "changes": 3
    }
  ],
  "stats": {
    "additions": 158,
    "total": 261,
    "deletions": 103
  },
  "committer": {
    "avatar_url": "https://secure.gravatar.com/avatar/38eb4e6b823b7e406e11de34be7fe61d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "id": 877966,
    "url": "https://api.github.com/users/chenxiaoyi",
    "login": "chenxiaoyi"
  },
  "parents": [
    {
      "sha": "be1ad36fa53475d72cb6d86f06e102573f0e98ea",
      "url": "https://api.github.com/repos/theplant/GBox/commits/be1ad36fa53475d72cb6d86f06e102573f0e98ea"
    }
  ],
  "url": "https://api.github.com/repos/theplant/GBox/commits/c6d72156027a9686ea871ed46f6c815e5e9cf7c0"
}
