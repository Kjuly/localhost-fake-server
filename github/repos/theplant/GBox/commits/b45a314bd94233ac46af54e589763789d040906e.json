{
  "committer": {
    "avatar_url": "https://secure.gravatar.com/avatar/38eb4e6b823b7e406e11de34be7fe61d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "id": 877966,
    "url": "https://api.github.com/users/chenxiaoyi",
    "login": "chenxiaoyi"
  },
  "author": {
    "avatar_url": "https://secure.gravatar.com/avatar/38eb4e6b823b7e406e11de34be7fe61d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "id": 877966,
    "url": "https://api.github.com/users/chenxiaoyi",
    "login": "chenxiaoyi"
  },
  "files": [
    {
      "patch": "--- a/GBMOModel.xcdatamodeld/GBMOModel.xcdatamodel/contents\n+++ b/GBMOModel.xcdatamodeld/GBMOModel.xcdatamodel/contents\n@@ -1,34 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n-<model name=\"\" userDefinedModelVersionIdentifier=\"\" type=\"com.apple.IDECoreDataModeler.DataModel\" documentVersion=\"1.0\" lastSavedToolsVersion=\"562\" systemVersion=\"11A511\" minimumToolsVersion=\"Automatic\" macOSVersion=\"Automatic\" iOSVersion=\"Automatic\">\n-    <entity name=\"GBCollectionEntity\" representedClassName=\"GBCollectionEntity\">\n-        <attribute name=\"belongRoot\" optional=\"YES\" attributeType=\"Boolean\" defaultValueString=\"YES\"/>\n-        <attribute name=\"identifier\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"level\" optional=\"YES\" attributeType=\"Integer 16\" defaultValueString=\"0\"/>\n-        <attribute name=\"resourceID\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"title\" optional=\"YES\" attributeType=\"String\"/>\n-        <relationship name=\"childCollections\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Nullify\" destinationEntity=\"GBCollectionEntity\" inverseName=\"parentCollections\" inverseEntity=\"GBCollectionEntity\"/>\n-        <relationship name=\"childDocEntries\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Nullify\" destinationEntity=\"GBDocEntryEntity\" inverseName=\"parentCollections\" inverseEntity=\"GBDocEntryEntity\"/>\n-        <relationship name=\"localPaths\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Nullify\" destinationEntity=\"GBLocalPathEntity\" inverseName=\"uniqueCollection\" inverseEntity=\"GBLocalPathEntity\"/>\n-        <relationship name=\"parentCollections\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Nullify\" destinationEntity=\"GBCollectionEntity\" inverseName=\"childCollections\" inverseEntity=\"GBCollectionEntity\"/>\n-    </entity>\n-    <entity name=\"GBDocEntryEntity\" representedClassName=\"GBDocEntryEntity\">\n-        <attribute name=\"ETag\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"exist\" optional=\"YES\" attributeType=\"Boolean\"/>\n-        <attribute name=\"identifier\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"localTitle\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"md5Checksum\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"resourceID\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"title\" optional=\"YES\" attributeType=\"String\"/>\n-        <attribute name=\"updatedDate\" optional=\"YES\" attributeType=\"Date\"/>\n-        <relationship name=\"localPaths\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Nullify\" destinationEntity=\"GBLocalPathEntity\" inverseName=\"uniqueDocEntry\" inverseEntity=\"GBLocalPathEntity\"/>\n-        <relationship name=\"parentCollections\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Nullify\" destinationEntity=\"GBCollectionEntity\" inverseName=\"childDocEntries\" inverseEntity=\"GBCollectionEntity\"/>\n-    </entity>\n-    <entity name=\"GBLocalPathEntity\" representedClassName=\"GBLocalPathEntity\">\n-        <attribute name=\"isFile\" optional=\"YES\" attributeType=\"Boolean\"/>\n-        <attribute name=\"stringValue\" optional=\"YES\" attributeType=\"String\"/>\n-        <relationship name=\"uniqueCollection\" optional=\"YES\" minCount=\"1\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"GBCollectionEntity\" inverseName=\"localPaths\" inverseEntity=\"GBCollectionEntity\"/>\n-        <relationship name=\"uniqueDocEntry\" optional=\"YES\" minCount=\"1\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"GBDocEntryEntity\" inverseName=\"localPaths\" inverseEntity=\"GBDocEntryEntity\"/>\n-    </entity>\n+<model name=\"\" userDefinedModelVersionIdentifier=\"\" type=\"com.apple.IDECoreDataModeler.DataModel\" documentVersion=\"1.0\" lastSavedToolsVersion=\"562\" systemVersion=\"11B26\" minimumToolsVersion=\"Automatic\" macOSVersion=\"Automatic\" iOSVersion=\"Automatic\">\n     <entity name=\"GBTaskEntity\" representedClassName=\"GBTaskEntity\">\n         <attribute name=\"count\" optional=\"YES\" attributeType=\"Integer 16\" defaultValueString=\"0\"/>\n         <attribute name=\"eventCode\" optional=\"YES\" attributeType=\"Integer 16\" defaultValueString=\"0\"/>\n@@ -38,22 +9,12 @@\n         <attribute name=\"retry\" optional=\"YES\" attributeType=\"Integer 16\" defaultValueString=\"0\"/>\n         <attribute name=\"state\" optional=\"YES\" attributeType=\"Integer 16\"/>\n     </entity>\n-    <fetchRequest name=\"fetchBelongRootCollections\" entity=\"GBCollectionEntity\" predicateString=\"belongRoot == 1\"/>\n-    <fetchRequest name=\"fetchCollectionByIdentifier\" entity=\"GBCollectionEntity\" predicateString=\"identifier LIKE $collectionIdentifier\"/>\n-    <fetchRequest name=\"fetchCollectionByResourceID\" entity=\"GBCollectionEntity\" predicateString=\"resourceID LIKE $collectionResourceID\"/>\n-    <fetchRequest name=\"fetchDocEntryByIdentifier\" entity=\"GBDocEntryEntity\" predicateString=\"identifier LIKE $docEntryIdentifier\"/>\n-    <fetchRequest name=\"fetchDocEntryByMD5AndFileName\" entity=\"GBDocEntryEntity\" predicateString=\"md5checksum LIKE $md5 AND title LIKE $fileName\"/>\n-    <fetchRequest name=\"fetchDocEntryByResourceID\" entity=\"GBDocEntryEntity\" predicateString=\"resourceID LIKE $docEntryResourceID\"/>\n     <fetchRequest name=\"fetchDoneTasks\" entity=\"GBTaskEntity\" predicateString=\"state == 3\"/>\n     <fetchRequest name=\"fetchExecutingTasks\" entity=\"GBTaskEntity\" predicateString=\"state == 2\"/>\n-    <fetchRequest name=\"fetchLocalPathByStringValue\" entity=\"GBLocalPathEntity\" predicateString=\"stringValue LIKE $pathString\"/>\n     <fetchRequest name=\"fetchTaskByMultiParameter\" entity=\"GBTaskEntity\" predicateString=\"operandA == $operandA AND eventCode == $eventCode AND eventID >= $startTimestamp\"/>\n     <fetchRequest name=\"fetchTaskByTimestamp\" entity=\"GBTaskEntity\" predicateString=\"eventID == $eventID\"/>\n     <fetchRequest name=\"fetchWaitingTasks\" entity=\"GBTaskEntity\" predicateString=\"state == 1\"/>\n     <elements>\n-        <element name=\"GBCollectionEntity\" positionX=\"160\" positionY=\"192\" width=\"128\" height=\"180\"/>\n-        <element name=\"GBDocEntryEntity\" positionX=\"-9\" positionY=\"-18\" width=\"128\" height=\"195\"/>\n-        <element name=\"GBLocalPathEntity\" positionX=\"313\" positionY=\"-36\" width=\"128\" height=\"105\"/>\n         <element name=\"GBTaskEntity\" positionX=\"529\" positionY=\"135\" width=\"128\" height=\"120\"/>\n     </elements>\n </model>\n\\ No newline at end of file",
      "status": "modified",
      "deletions": 40,
      "additions": 1,
      "blob_url": "https://github.com/theplant/GBox/blob/b45a314bd94233ac46af54e589763789d040906e/GBMOModel.xcdatamodeld/GBMOModel.xcdatamodel/contents",
      "changes": 41,
      "filename": "GBMOModel.xcdatamodeld/GBMOModel.xcdatamodel/contents",
      "sha": "b45a314bd94233ac46af54e589763789d040906e",
      "raw_url": "https://github.com/theplant/GBox/raw/b45a314bd94233ac46af54e589763789d040906e/GBMOModel.xcdatamodeld/GBMOModel.xcdatamodel/contents"
    },
    {
      "patch": "--- a/GBox.xcodeproj/project.pbxproj\n+++ b/GBox.xcodeproj/project.pbxproj\n@@ -32,9 +32,6 @@\n \t\t4C1FEDFC13BE3C4000679BD7 /* WebKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 4C1FEDF913BE3C4000679BD7 /* WebKit.framework */; };\n \t\t4C1FEDFD13BE3C4000679BD7 /* SystemConfiguration.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 4C1FEDFA13BE3C4000679BD7 /* SystemConfiguration.framework */; };\n \t\t4C22467D13E425F40084B82B /* GBFileSystemInfo.m in Sources */ = {isa = PBXBuildFile; fileRef = 4C22467C13E425F40084B82B /* GBFileSystemInfo.m */; };\n-\t\t4C40E8A513E15C5E004E4794 /* GBCollectionEntity.m in Sources */ = {isa = PBXBuildFile; fileRef = 4C40E8A413E15C5E004E4794 /* GBCollectionEntity.m */; };\n-\t\t4C40E8A913E15C5F004E4794 /* GBDocEntryEntity.m in Sources */ = {isa = PBXBuildFile; fileRef = 4C40E8A813E15C5F004E4794 /* GBDocEntryEntity.m */; };\n-\t\t4C40E8AC13E15C60004E4794 /* GBLocalPathEntity.m in Sources */ = {isa = PBXBuildFile; fileRef = 4C40E8AB13E15C60004E4794 /* GBLocalPathEntity.m */; };\n \t\t4C43BF2613CDDD23006EBEB7 /* GBACLShareManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 4C43BF1F13CDDD23006EBEB7 /* GBACLShareManager.m */; };\n \t\t4C43BF2713CDDD23006EBEB7 /* GBCollectionManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 4C43BF2113CDDD23006EBEB7 /* GBCollectionManager.m */; };\n \t\t4C43BF2913CDDD23006EBEB7 /* GBUtility.m in Sources */ = {isa = PBXBuildFile; fileRef = 4C43BF2513CDDD23006EBEB7 /* GBUtility.m */; };\n@@ -228,12 +225,6 @@\n \t\t4C1FEDFA13BE3C4000679BD7 /* SystemConfiguration.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; path = SystemConfiguration.framework; sourceTree = \"<group>\"; };\n \t\t4C22467B13E425F40084B82B /* GBFileSystemInfo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GBFileSystemInfo.h; sourceTree = \"<group>\"; };\n \t\t4C22467C13E425F40084B82B /* GBFileSystemInfo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GBFileSystemInfo.m; sourceTree = \"<group>\"; };\n-\t\t4C40E8A313E15C5E004E4794 /* GBCollectionEntity.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GBCollectionEntity.h; sourceTree = \"<group>\"; };\n-\t\t4C40E8A413E15C5E004E4794 /* GBCollectionEntity.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GBCollectionEntity.m; sourceTree = \"<group>\"; };\n-\t\t4C40E8A713E15C5F004E4794 /* GBDocEntryEntity.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GBDocEntryEntity.h; sourceTree = \"<group>\"; };\n-\t\t4C40E8A813E15C5F004E4794 /* GBDocEntryEntity.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GBDocEntryEntity.m; sourceTree = \"<group>\"; };\n-\t\t4C40E8AA13E15C60004E4794 /* GBLocalPathEntity.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GBLocalPathEntity.h; sourceTree = \"<group>\"; };\n-\t\t4C40E8AB13E15C60004E4794 /* GBLocalPathEntity.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GBLocalPathEntity.m; sourceTree = \"<group>\"; };\n \t\t4C43BF1E13CDDD23006EBEB7 /* GBACLShareManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GBACLShareManager.h; sourceTree = \"<group>\"; };\n \t\t4C43BF1F13CDDD23006EBEB7 /* GBACLShareManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GBACLShareManager.m; sourceTree = \"<group>\"; };\n \t\t4C43BF2013CDDD23006EBEB7 /* GBCollectionManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GBCollectionManager.h; sourceTree = \"<group>\"; };\n@@ -737,12 +728,6 @@\n \t\t\tchildren = (\n \t\t\t\t4C8E5EE513D7C95700B07EAD /* GBDataFacility.h */,\n \t\t\t\t4C8E5EE613D7C95700B07EAD /* GBDataFacility.m */,\n-\t\t\t\t4C40E8A713E15C5F004E4794 /* GBDocEntryEntity.h */,\n-\t\t\t\t4C40E8A813E15C5F004E4794 /* GBDocEntryEntity.m */,\n-\t\t\t\t4C40E8A313E15C5E004E4794 /* GBCollectionEntity.h */,\n-\t\t\t\t4C40E8A413E15C5E004E4794 /* GBCollectionEntity.m */,\n-\t\t\t\t4C40E8AA13E15C60004E4794 /* GBLocalPathEntity.h */,\n-\t\t\t\t4C40E8AB13E15C60004E4794 /* GBLocalPathEntity.m */,\n \t\t\t\t4CF0A2E613DE5E030019D55B /* GBMOModel.xcdatamodeld */,\n \t\t\t\t4CCB3B2A13FB5B8A002B5178 /* GBTaskEntity.h */,\n \t\t\t\t4CCB3B2B13FB5B8A002B5178 /* GBTaskEntity.m */,\n@@ -1229,9 +1214,6 @@\n \t\t\t\t4CB2ACA513DD1D9D001990E9 /* GBoxConstants.m in Sources */,\n \t\t\t\t4CF0A2E813DE5E030019D55B /* GBMOModel.xcdatamodeld in Sources */,\n \t\t\t\t4CC57F6E13E0002C0093B128 /* GBSyncController.m in Sources */,\n-\t\t\t\t4C40E8A513E15C5E004E4794 /* GBCollectionEntity.m in Sources */,\n-\t\t\t\t4C40E8A913E15C5F004E4794 /* GBDocEntryEntity.m in Sources */,\n-\t\t\t\t4C40E8AC13E15C60004E4794 /* GBLocalPathEntity.m in Sources */,\n \t\t\t\t4C22467D13E425F40084B82B /* GBFileSystemInfo.m in Sources */,\n \t\t\t\t4C545EE713E6897500EDBA5A /* GBTaskHandler.m in Sources */,\n \t\t\t\tCFFB6FDE13EB967100ACDE56 /* FSBrowserCell.m in Sources */,",
      "status": "modified",
      "deletions": 18,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/b45a314bd94233ac46af54e589763789d040906e/GBox.xcodeproj/project.pbxproj",
      "changes": 18,
      "filename": "GBox.xcodeproj/project.pbxproj",
      "sha": "b45a314bd94233ac46af54e589763789d040906e",
      "raw_url": "https://github.com/theplant/GBox/raw/b45a314bd94233ac46af54e589763789d040906e/GBox.xcodeproj/project.pbxproj"
    },
    {
      "patch": "--- a/GBox/GBCollectionEntity.h\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-//\n-//  GBCollectionEntity.h\n-//  GBox\n-//\n-//  Created by XiaoyiChen on 7/28/11.\n-//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.\n-//\n-\n-#import <Foundation/Foundation.h>\n-#import <CoreData/CoreData.h>\n-\n-@class GBCollectionEntity, GBDocEntryEntity, GBLocalPathEntity;\n-\n-@interface GBCollectionEntity : NSManagedObject {\n-@private\n-}\n-@property (nonatomic, retain) NSNumber * belongRoot;\n-@property (nonatomic, retain) NSString * identifier;\n-@property (nonatomic, retain) NSNumber * level;\n-@property (nonatomic, retain) NSString * resourceID;\n-@property (nonatomic, retain) NSString * title;\n-@property (nonatomic, retain) NSSet *childCollections;\n-@property (nonatomic, retain) NSSet *childDocEntries;\n-@property (nonatomic, retain) NSSet *localPaths;\n-@property (nonatomic, retain) NSSet *parentCollections;\n-@end\n-\n-@interface GBCollectionEntity (CoreDataGeneratedAccessors)\n-\n-- (void)addChildCollectionsObject:(GBCollectionEntity *)value;\n-- (void)removeChildCollectionsObject:(GBCollectionEntity *)value;\n-- (void)addChildCollections:(NSSet *)values;\n-- (void)removeChildCollections:(NSSet *)values;\n-\n-- (void)addChildDocEntriesObject:(GBDocEntryEntity *)value;\n-- (void)removeChildDocEntriesObject:(GBDocEntryEntity *)value;\n-- (void)addChildDocEntries:(NSSet *)values;\n-- (void)removeChildDocEntries:(NSSet *)values;\n-\n-- (void)addLocalPathsObject:(GBLocalPathEntity *)value;\n-- (void)removeLocalPathsObject:(GBLocalPathEntity *)value;\n-- (void)addLocalPaths:(NSSet *)values;\n-- (void)removeLocalPaths:(NSSet *)values;\n-\n-- (void)addParentCollectionsObject:(GBCollectionEntity *)value;\n-- (void)removeParentCollectionsObject:(GBCollectionEntity *)value;\n-- (void)addParentCollections:(NSSet *)values;\n-- (void)removeParentCollections:(NSSet *)values;\n-\n-@end",
      "status": "removed",
      "deletions": 50,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBCollectionEntity.h",
      "changes": 50,
      "filename": "GBox/GBCollectionEntity.h",
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "raw_url": "https://github.com/theplant/GBox/raw/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBCollectionEntity.h"
    },
    {
      "patch": "--- a/GBox/GBCollectionEntity.m\n+++ /dev/null\n@@ -1,26 +0,0 @@\n-//\n-//  GBCollectionEntity.m\n-//  GBox\n-//\n-//  Created by XiaoyiChen on 7/28/11.\n-//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.\n-//\n-\n-#import \"GBCollectionEntity.h\"\n-#import \"GBCollectionEntity.h\"\n-#import \"GBDocEntryEntity.h\"\n-#import \"GBLocalPathEntity.h\"\n-\n-\n-@implementation GBCollectionEntity\n-@dynamic belongRoot;\n-@dynamic identifier;\n-@dynamic level;\n-@dynamic resourceID;\n-@dynamic title;\n-@dynamic childCollections;\n-@dynamic childDocEntries;\n-@dynamic localPaths;\n-@dynamic parentCollections;\n-\n-@end",
      "status": "removed",
      "deletions": 26,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBCollectionEntity.m",
      "changes": 26,
      "filename": "GBox/GBCollectionEntity.m",
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "raw_url": "https://github.com/theplant/GBox/raw/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBCollectionEntity.m"
    },
    {
      "patch": "--- a/GBox/GBDataFacility.h\n+++ b/GBox/GBDataFacility.h\n@@ -26,70 +26,26 @@\n \n +(GBDataFacility*)sharedDataFacility;\n \n--(void)refresh;\n -(void)clearData;\n \n--(void) DisplayDocEntries:(NSArray *)docEntries;\n--(void) DisplayCollections:(NSArray *)collections ;\n-\n--(void)checkServerCollectionsForPossibleTask:(NSArray*)collections;\n--(void)checkServerEntriesForPossibleTask:(NSArray*)docEntries;\n-\n -(BOOL) InitializeCoreDataStack:(NSError **)error;\n \n-//Fetch all entries of specific type of entity\n--(NSArray *)FetchAllEntriesOf:(NSString*) type ;\n-\n-//Fetch method using Fetch Request Template\n--(NSManagedObject*)fetchCollectionByIdentifier:(NSString*) identifier;\n--(NSManagedObject*)fetchDocEntryByIdentifier:(NSString*) identifier ;\n--(NSManagedObject*)fetchLocalPathEntryByPathString:(NSString*)pathString;\n -(NSArray*)fetchTaskOfState:(NSInteger)state;\n -(NSManagedObject*)fetchTaskOfTimestamp:(NSNumber*)timestamp;\n \n-//Check existence of the entity entry\n--(BOOL)isCollectionEntryExistByIdentifier:(NSString*)identifier;\n--(BOOL)isLocalPathEntryExistByPathString:(NSString*)pathString;\n--(BOOL)isDocEntryExistByIdentifier:(NSString*)identifier;\n-/*Caution: These method should be called in the order showed here. \n- *This order really matters, the result is not estimatable if the order is not respected.\n- */\n--(void)handleRelationshipBetweenCollections;\n--(void)handleLevelAndPathForCollection;\n--(void)handlePathForEntry;\n-\n-//-(NSManagedObject *)InsertLocalDocEntryAndSave:(NSString*)path;\n--(NSManagedObject *)InsertCollectionAndSave:(GDataEntryDocBase*) folderEntry ;\n--(NSManagedObject *)InsertDocEntryAndSave:(GDataEntryDocBase*) docEntry;\n--(NSManagedObject *)InsertLocalPathOf:(BOOL)isFile AndSaveBy:(NSString*) pathString;\n-\n -(NSManagedObject *)insertEvent:(NSNumber*)eventID\n                   withEventCode:(NSInteger)eventCode\n                        operandA:(NSString*)operandA\n                     andOperandB:(NSString*)operandB;\n \n //Without saving instantly\n--(void)insertDocEntry:(GDataEntryDocBase*) gEntry;\n--(void)insertCollection:(GDataEntryDocBase*) gEntry;\n -(void)             insertEvent:(NSNumber*)eventID\n                   withEventCode:(NSInteger)eventCode\n                        operandA:(NSString*)operandA\n                        operandB:(NSString*)operandB\n-             andStateWithouSave:(NSUInteger)state;\n-\n--(NSManagedObject*)     insertLocalPath:(BOOL)isFile\n-                       uniqueCollection:(NSManagedObject*)collection\n-                            uniqueEntry:(NSManagedObject*)docEntry\n-                             pathString:(NSString*)pathString;\n-\n--(void)removePersistentStore;\n-\n-//-(NSSet*)localPathsOf:(NSManagedObjectID*)moID;\n+                       andState:(NSUInteger)state;\n \n //Helper Function:\n-\n--(NSString*) identifierForEntryAtLocalPath:(NSString*)pathString;\n-\n -(NSManagedObject*) moForMOID:(NSManagedObjectID*)moid;\n \n -(void) setState:(NSInteger) state ofTaskID:(NSManagedObjectID*)moid;",
      "status": "modified",
      "deletions": 45,
      "additions": 1,
      "blob_url": "https://github.com/theplant/GBox/blob/b45a314bd94233ac46af54e589763789d040906e/GBox/GBDataFacility.h",
      "changes": 46,
      "filename": "GBox/GBDataFacility.h",
      "sha": "b45a314bd94233ac46af54e589763789d040906e",
      "raw_url": "https://github.com/theplant/GBox/raw/b45a314bd94233ac46af54e589763789d040906e/GBox/GBDataFacility.h"
    },
    {
      "patch": "--- a/GBox/GBDataFacility.m\n+++ b/GBox/GBDataFacility.m\n@@ -4,9 +4,6 @@\n #import \"GBoxConstants.h\"\n #import \"GBUtility.h\"\n \n-#import \"GBCollectionEntity.h\"\n-#import \"GBDocEntryEntity.h\"\n-\n @interface GBDataFacility()\n \n @end\n@@ -135,196 +132,6 @@ static GBDataFacility* instance =nil;\n     return (persistentStore!=nil);\n }\n \n-// Fetch all doc entry instances available via the tool's persistence stack.  Return the fetched DocEntries if the fetch was successful, even if there were no DocEntries fetched.  Return nil and an autoreleased NSError in *error if the fetch was unsuccessful.\n-\n--(NSArray *)FetchAllEntriesOf:(NSString*) type {\n-    NSArray *docEntries = nil;\n-    \n-    // Create a request to fetch all docEntries.\n-    \n-    NSEntityDescription *entity = [NSEntityDescription entityForName:type inManagedObjectContext:context];\n-    \n-    NSFetchRequest *request = [[NSFetchRequest alloc] init];\n-    [request setEntity:entity];\n-    \n-    // Ask the context for everything matching the request.\n-    // If an error occurs, the context will return nil and an error in *error.\n-    NSError* error = nil;\n-    docEntries = [context executeFetchRequest:request error:&error];\n-    \n-    // Clean up and return.\n-    \n-    [request release];\n-    \n-    return docEntries;\n-}\n-\n--(void)handleRelationshipBetweenCollections{\n-    NSArray *collectionsInData = [self FetchAllEntriesOf:@\"GBCollectionEntity\"];\n-    for(NSManagedObject * collectionEntity in collectionsInData){\n-        \n-        NSArray* includingCollections = [collectionManager includingCollectionOfIdentifier:[collectionEntity valueForKey:@\"identifier\"]] ;\n-        if([includingCollections count]!=0){\n-            [collectionEntity setValue:NO forKey:@\"belongRoot\"];\n-        }\n-        for(GDataEntryFolderDoc* collectionEntry in includingCollections ){\n-            //NSLog(@\"Found Collection: %@ %@\", [collection valueForKey:@\"identifier\"], [collection valueForKey:@\"title\"]);\n-            if([collectionEntry identifier]!=nil){\n-                NSManagedObject *collectionParentEntryEntity = [self fetchCollectionByIdentifier:[collectionEntry identifier]];\n-            \n-                [collectionEntity addParentCollectionsObject:collectionParentEntryEntity];\n-            }\n-        }\n-        //[includingCollections autorelease];\n-    }\n-}\n-\n-\n-\n--(void)setChildPath:(NSSet*) paths forCollection:(NSManagedObject*) collection{\n-    NSSet* childCollections = [collection valueForKey:@\"childCollections\"];\n-    NSMutableSet* childPathsSet = [[NSMutableSet alloc] init ];\n-    for(NSManagedObject* child in childCollections){\n-        for(NSString* path in paths){\n-            NSString* newPath = [path stringByAppendingFormat:@\"%@/\",[child valueForKey:@\"title\"]];\n-            [childPathsSet addObject:newPath];\n-            [self insertLocalPath:NO\n-                 uniqueCollection:child\n-                      uniqueEntry:nil\n-                       pathString:newPath];\n-            //[child addLocalPathsObject:newPathMO];\n-            [self setChildPath:childPathsSet forCollection:child];\n-        }\n-    }\n-}\n-\n--(void)setChildLevel:(NSInteger)level forCollection:(NSManagedObject*) collection{\n-    NSSet* childCollections = [collection valueForKey:@\"childCollections\"];\n-    for(NSManagedObject* child in childCollections){\n-        [child setValue:[NSNumber numberWithInteger: level ] forKey:@\"level\"];\n-        [self setChildLevel:level+1 forCollection:child];\n-    }\n-}\n-\n-/*\n- *This method can only be called after the relationship between collections are handled.\n- */\n-\n--(void)handleLevelAndPathForCollection{\n-    NSError * error =nil;\n-    NSArray* rootCollections;\n-    NSFetchRequest *fetchRootRequest = [model \n-                                        fetchRequestTemplateForName:@\"fetchBelongRootCollections\"];\n-    rootCollections = [context executeFetchRequest:fetchRootRequest error:&error];\n-    for(NSManagedObject* collection in rootCollections){\n-        [self setChildLevel:1 forCollection:collection];\n-        \n-        NSString* collectionPath = [NSString stringWithFormat:@\"%@%@\",[collection valueForKey:@\"title\"],@\"/\"];\n-        NSSet * childPathSet = [NSSet setWithObject:collectionPath];\n-        \n-        [self insertLocalPath:NO\n-             uniqueCollection:collection\n-                  uniqueEntry:nil\n-                   pathString:collectionPath];\n-        \n-        [self setChildPath:childPathSet forCollection:collection];\n-        \n-    }\n-    \n-}\n-\n--(void) relateDocEntry:(NSManagedObject*)docEntry ToPath:(NSString*) newPath{\n-    BOOL whetherAddNewPath = YES;\n-    if([self isLocalPathEntryExistByPathString:newPath]){\n-        NSManagedObject* newPathMO = [self fetchLocalPathEntryByPathString:newPath];\n-        //Test if the old one matches the current Entry\n-        if([newPathMO valueForKey:@\"uniqueDocEntry\"]==nil){\n-            whetherAddNewPath = NO;\n-            [newPathMO setValue:docEntry forKey:@\"uniqueDocEntry\"];\n-        }else{\n-            \n-            NSString* fetchedEntryIdentifier =[ [newPathMO valueForKey:@\"uniqueDocEntry\"] valueForKey:@\"identifier\"];\n-            NSString* currentEntryIdentifier = [docEntry valueForKey:@\"identifier\"];\n-            \n-            if([fetchedEntryIdentifier isEqualToString: currentEntryIdentifier]){ \n-                whetherAddNewPath = NO;\n-                //[newPathMO setValue:docEntry forKey:@\"uniqueDocEntry\"];\n-            }else{\n-                whetherAddNewPath =YES;\n-            }\n-            \n-            \n-        }\n-        if(whetherAddNewPath){\n-            NSInteger i =1;\n-            while(true){\n-                NSString* tempString=nil;\n-                NSString* pathExtension = [newPath pathExtension];\n-                if([pathExtension isEqualToString:@\"\"]){\n-                    tempString = [newPath stringByAppendingFormat:@\"(%i)\",i];\n-                }else{\n-                    tempString = [[[newPath stringByDeletingPathExtension] \n-                                             stringByAppendingFormat:@\"(%i)\",i]\n-                                            stringByAppendingPathExtension:pathExtension];\n-                }\n-                \n-                if(![self isLocalPathEntryExistByPathString:tempString]){\n-                    newPath = tempString;\n-                    break;\n-                }else{\n-                    //[tempString release];\n-                    //[pathExtension release];\n-                    i=i+1;\n-                }\n-            }\n-            [self insertLocalPath:YES\n-                 uniqueCollection:nil\n-                      uniqueEntry:docEntry\n-                       pathString:newPath];\n-            [docEntry setValue:[newPath lastPathComponent] forKey:@\"localTitle\"];\n-        }\n-    }else{\n-        [self insertLocalPath:YES\n-             uniqueCollection:nil\n-                  uniqueEntry:docEntry\n-                   pathString:newPath];\n-    }\n-    \n-\n-}\n-\n--(void)handlePathForEntry{\n-    NSArray* allDocEntries = [self FetchAllEntriesOf:@\"GBDocEntryEntity\"];\n-    for(NSManagedObject* docEntry in allDocEntries){\n-        NSSet* parentsSet = [docEntry valueForKey:@\"parentCollections\"];\n-        NSString* titleORlocalTitle = @\"title\";\n-        if([docEntry valueForKey:@\"localTitle\" ]!=nil){\n-            titleORlocalTitle = @\"localTitle\";\n-        }\n-        if([parentsSet count]==0){\n-            NSString* newPath =[docEntry valueForKey:titleORlocalTitle];\n-            [self relateDocEntry:docEntry ToPath:newPath];\n-        }\n-        for(NSManagedObject* parent in parentsSet){\n-            NSSet* parentsPathSet = [parent valueForKey:@\"localPaths\"];\n-            for(NSManagedObject* parentPath in parentsPathSet){\n-                NSString* newPath =[[parentPath valueForKey:@\"stringValue\"] \n-                                        stringByAppendingFormat:@\"%@\",[docEntry valueForKey:titleORlocalTitle] ];\n-                \n-                [self relateDocEntry:docEntry ToPath:newPath];\n-\n-            }\n-            \n-        }\n-    }\n-    NSError* error =nil;\n-    if (![context save: &error]) {              //It is the save operation.\n-        NSLog(@\"Error while saving\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-\n-}\n \n -(void)clearData{ \n     //Refresh Data\n@@ -348,42 +155,6 @@ static GBDataFacility* instance =nil;\n }\n \n \n-/*\n--(NSManagedObject *)InsertLocalDocEntryAndSave:(NSString*)path{\n-    NSString * md5 = [GBUtility getMD5FromFile:path];\n-    \n-                      \n-}\n-*/\n-\n-// No Doc entry existed, so create one with some default attributes and save the object graph to the persistent store.  Return the new DocEntry if saving was successful, otherwise return nil and an autoreleased NSError in *error.\n-\n--(void)insertDocEntry:(GDataEntryDocBase*) gEntry {\n-    \n-    if(![self isDocEntryExistByIdentifier:[gEntry identifier]]){\n-        \n-        NSManagedObject *docEntry = nil;\n-        \n-        docEntry = [NSEntityDescription insertNewObjectForEntityForName:@\"GBDocEntryEntity\" inManagedObjectContext:context];\n-        \n-        [docEntry setValue:[gEntry ETag]  forKey:@\"ETag\"];\n-        [docEntry setValue:[gEntry resourceID] forKey:@\"resourceID\"];\n-        [docEntry setValue:[gEntry identifier]  forKey:@\"identifier\"];\n-        [docEntry setValue:[[gEntry updatedDate] date] forKey:@\"updatedDate\"];\n-        [docEntry setValue:[gEntry MD5Checksum]  forKey:@\"md5Checksum\"];\n-        [docEntry setValue:[[gEntry title] stringValue] forKey:@\"title\"];\n-        \n-        NSArray* includingCollections = [collectionManager includingCollectionOf:gEntry];\n-        for(GDataEntryFolderDoc* collectionEntry in includingCollections ){\n-            if([collectionEntry identifier]!=nil){\n-                NSManagedObject *collectionEntryEntity = [self fetchCollectionByIdentifier:[collectionEntry identifier]];\n-                [docEntry addParentCollectionsObject:collectionEntryEntity];\n-            }\n-        }\n-        \n-    }    \n-}\n-\n -(void)contextSave{\n     NSError * error = nil ;\n     \n@@ -396,146 +167,11 @@ static GBDataFacility* instance =nil;\n }\n \n \n--(NSManagedObject *)InsertDocEntryAndSave:(GDataEntryDocBase*) gEntry {\n-    \n-    if([self isDocEntryExistByIdentifier:[gEntry identifier]]){\n-        //NSLog(@\"Entry already exist at the database.%@\",[[gEntry title]stringValue]);\n-        \n-        //Compare the gEntry's updated time\n-                                        \n-        return [self fetchDocEntryByIdentifier:[gEntry identifier]];\n-    }\n-    \n-    NSManagedObject *docEntry = nil;\n-    \n-    docEntry = [NSEntityDescription insertNewObjectForEntityForName:@\"GBDocEntryEntity\" inManagedObjectContext:context];\n-    \n-    [docEntry setValue:[gEntry ETag]  forKey:@\"ETag\"];\n-    [docEntry setValue:[gEntry resourceID] forKey:@\"resourceID\"];\n-    [docEntry setValue:[gEntry identifier]  forKey:@\"identifier\"];\n-    [docEntry setValue:[[gEntry updatedDate] date] forKey:@\"updatedDate\"];\n-    [docEntry setValue:[gEntry MD5Checksum]  forKey:@\"md5Checksum\"];\n-    [docEntry setValue:[[gEntry title] stringValue] forKey:@\"title\"];\n-    \n-    NSArray* includingCollections = [collectionManager includingCollectionOf:gEntry];\n-    for(GDataEntryFolderDoc* collectionEntry in includingCollections ){\n-        if([collectionEntry identifier]!=nil){\n-            NSManagedObject *collectionEntryEntity = [self fetchCollectionByIdentifier:[collectionEntry identifier]];\n-            [docEntry addParentCollectionsObject:collectionEntryEntity];\n-        }\n-    }\n-    \n-    NSError * error = nil ;\n-    \n-    if (![context save: &error]) {              //It is the save operation.\n-        [context deleteObject:docEntry];\n-        docEntry = nil;\n-        NSLog(@\"Error while saving\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    //[includingCollections autorelease];\n-    return docEntry;\n-}\n-\n--(NSManagedObject*)     insertLocalPath:(BOOL)isFile\n-           uniqueCollection:(NSManagedObject*)collection\n-                uniqueEntry:(NSManagedObject*)docEntry\n-                 pathString:(NSString*)pathString{\n-    if([self isLocalPathEntryExistByPathString:pathString]){\n-        //NSLog(@\"Entry already exist at the database.%@\",pathString);\n-        return [self fetchLocalPathEntryByPathString:pathString];\n-    }\n-    NSManagedObject *pathEntry = nil;\n-    \n-    pathEntry = [NSEntityDescription insertNewObjectForEntityForName:@\"GBLocalPathEntity\" inManagedObjectContext:context];\n-    [pathEntry setValue:[NSNumber numberWithBool: isFile] forKey:@\"isFile\"];\n-    [pathEntry setValue:pathString forKey:@\"stringValue\"];\n-    if(isFile){\n-        if(docEntry!=nil){\n-             [pathEntry setValue:docEntry forKey:@\"uniqueDocEntry\"];\n-        }\n-    }else{\n-        if(collection!= nil){\n-            [pathEntry setValue:collection forKey:@\"uniqueCollection\"];\n-        }\n-    }\n-\n-    return pathEntry;\n-\n-}\n--(NSManagedObject *)InsertLocalPathOf:(BOOL)isFile \n-                            AndSaveBy:(NSString*) pathString {\n-    if([self isLocalPathEntryExistByPathString:pathString]){\n-        //NSLog(@\"Entry already exist at the database.%@\",pathString);\n-        return [self fetchLocalPathEntryByPathString:pathString];\n-    }\n-    NSManagedObject *pathEntry = nil;\n-    \n-    pathEntry = [NSEntityDescription insertNewObjectForEntityForName:@\"GBLocalPathEntity\" inManagedObjectContext:context];\n-    [pathEntry setValue:[NSNumber numberWithBool: isFile] forKey:@\"isFile\"];\n-    [pathEntry setValue:pathString forKey:@\"stringValue\"];\n-    \n-    NSError * error = nil ;\n-    \n-    if (![context save: &error]) {\n-        [context deleteObject:pathEntry];\n-        pathEntry = nil;\n-        NSLog(@\"Error while saving\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    \n-    return pathEntry;\n-}\n-\n--(NSManagedObject *)InsertCollectionAndSave:(GDataEntryDocBase*) gEntry {\n-    if([self isCollectionEntryExistByIdentifier:[gEntry identifier]]){\n-        //NSLog(@\"Entry already exist at the database.%@\",[[gEntry title]stringValue]);\n-        return [self fetchDocEntryByIdentifier:[gEntry identifier]];\n-    }\n-    \n-    NSManagedObject *collectionEntry = nil;\n-    \n-    collectionEntry = [NSEntityDescription insertNewObjectForEntityForName:@\"GBCollectionEntity\" inManagedObjectContext:context];\n-    \n-    [collectionEntry setValue:[gEntry resourceID] forKey:@\"resourceID\"];\n-    [collectionEntry setValue:[gEntry identifier]  forKey:@\"identifier\"];\n-    [collectionEntry setValue:[[gEntry title] stringValue] forKey:@\"title\"];\n-    \n-    NSError * error = nil ;\n-    \n-    if (![context save: &error]) {\n-        [context deleteObject:collectionEntry];\n-        collectionEntry = nil;\n-        NSLog(@\"Error while saving\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    \n-    return collectionEntry;\n-}\n-\n--(void)insertCollection:(GDataEntryDocBase*) gEntry {\n-    if(![self isCollectionEntryExistByIdentifier:[gEntry identifier]]){\n-        //NSLog(@\"Entry already exist at the database.%@\",[[gEntry title]stringValue]);\n-        \n-        NSManagedObject *collectionEntry = nil;\n-        \n-        collectionEntry = [NSEntityDescription insertNewObjectForEntityForName:@\"GBCollectionEntity\" inManagedObjectContext:context];\n-        \n-        [collectionEntry setValue:[gEntry resourceID] forKey:@\"resourceID\"];\n-        [collectionEntry setValue:[gEntry identifier]  forKey:@\"identifier\"];\n-        [collectionEntry setValue:[[gEntry title] stringValue] forKey:@\"title\"];\n-        \n-    }\n-}\n-\n -(void)             insertEvent:(NSNumber*)eventID\n                   withEventCode:(NSInteger)eventCode\n                        operandA:(NSString*)operandA\n                        operandB:(NSString*)operandB\n-             andStateWithouSave:(NSUInteger)state{\n+                       andState:(NSUInteger)state{\n     \n     NSManagedObject *taskEntry = nil;\n     \n@@ -590,77 +226,12 @@ static GBDataFacility* instance =nil;\n         [taskEntry setValue:operandB forKey:@\"operandB\"];\n     }\n     \n-    [taskEntry setValue:[NSNumber numberWithInteger:0] forKey:@\"count\"];\n+    //[taskEntry setValue:[NSNumber numberWithInteger:0] forKey:@\"count\"];\n \n     return taskEntry;\n     \n }\n \n-// Print information on the found docEntries.\n-        \n--(void) DisplayDocEntries:(NSArray *)docEntries {\n-            \n-    NSLog(@\"docEntries found: %lu\", [docEntries count]);\n-    \n-    NSEnumerator *docEntriesEnumerator = [docEntries objectEnumerator];\n-    NSManagedObject *docEntry;\n-    \n-    while ((docEntry = [docEntriesEnumerator nextObject]) != nil) {\n-        //NSLog(@\"Found DocEntry: %@ %@\", [docEntry valueForKey:@\"identifier\"], [docEntry valueForKey:@\"title\"]);\n-        //NSString* initialPath = @\"\";\n-        //NSLog(@\"The path of %@ is %@\",[docEntry valueForKey:@\"title\"],[self localPathOf:[docEntry objectID] withInitialPath:initialPath]);\n-        NSLog(@\"Doc Entry :%@ is updated at %@\",[docEntry valueForKey:@\"title\"],[docEntry valueForKey:@\"updatedDate\"]);\n-        \n-        \n-    }\n-}\n-        \n-\n--(void) DisplayCollections:(NSArray *)collections {\n-    NSLog(@\"docEntries collection: %lu\", [collections count]);\n-    \n-    NSEnumerator *docEntriesEnumerator = [collections objectEnumerator];\n-    NSManagedObject *collection;\n-    \n-    while ((collection = [docEntriesEnumerator nextObject]) != nil) {\n-        //NSLog(@\"Found Collection: %@ %@\", [collection valueForKey:@\"identifier\"], [collection valueForKey:@\"title\"]);\n-       // NSLog([self localPathOf:[collection objectID] withInitialPath:@\"\"]);\n-    }\n-    \n-}\n-\n--(BOOL)isLocalPathEntryExistByPathString:(NSString*)pathString{\n-    NSError * error =nil;\n-    \n-    NSFetchRequest *fetchPathRequest = [model \n-                                        fetchRequestFromTemplateWithName:@\"fetchLocalPathByStringValue\"\n-                                        substitutionVariables:[NSDictionary dictionaryWithObject:pathString forKey:@\"pathString\"]];\n-    \n-    NSUInteger count = [context countForFetchRequest: fetchPathRequest error:&error];\n-    \n-    \n-    if(count >0)\n-        return YES;\n-    else \n-        return NO;\n-}\n-\n--(BOOL)isCollectionEntryExistByIdentifier:(NSString*)identifier{\n-    NSError * collError =nil;\n-    \n-    NSFetchRequest *fetchCollRequest = [model \n-                                        fetchRequestFromTemplateWithName:@\"fetchCollectionByIdentifier\"\n-                                        substitutionVariables:[NSDictionary dictionaryWithObject:identifier forKey:@\"collectionIdentifier\"]];\n-    \n-    NSUInteger count = [context countForFetchRequest: fetchCollRequest error:&collError];\n-    \n-    \n-    if(count >0)\n-        return YES;\n-    else \n-        return NO;\n-}\n-\n -(NSUInteger)countOfWaitingTasks{\n     NSError * error =nil;\n     \n@@ -683,54 +254,6 @@ static GBDataFacility* instance =nil;\n     \n }\n \n--(BOOL)isDocEntryExistByIdentifier:(NSString*)identifier{\n-    NSFetchRequest *fetchDocEntryRequest = [model \n-                                    fetchRequestFromTemplateWithName:@\"fetchDocEntryByIdentifier\"\n-                                    substitutionVariables:\n-                                    [NSDictionary dictionaryWithObjectsAndKeys:identifier,@\"docEntryIdentifier\", nil]];\n-    NSError * docError =nil;\n-    \n-    NSUInteger count = [context countForFetchRequest:fetchDocEntryRequest error:&docError];\n-    \n-    if(count >0)\n-        return YES;\n-    else \n-        return NO;\n-}\n-\n-\n-\n--(NSManagedObject*)fetchTaskOfEventCode:(NSInteger)eventCode\n-                               operandA:(NSString*)operandA\n-                         startTimestamp:(NSNumber*)startTimestamp{\n-    \n-    NSArray* taskEntries=nil;\n-    NSFetchRequest *fetchRequest = [model \n-                                    fetchRequestFromTemplateWithName:@\"fetchTaskByMultiParameter\"\n-                                    substitutionVariables:\n-                                    [NSDictionary dictionaryWithObjectsAndKeys:\n-                                                    [NSNumber numberWithInteger:eventCode],@\"eventCode\",\n-                                                                                  operandA,@\"operandA\",\n-                                                                            startTimestamp,@\"startTimestamp\", nil]];                \n-    NSError* error=nil;\n-    \n-    taskEntries = [context executeFetchRequest:fetchRequest error:&error];\n-    \n-    if ((error != nil) || (taskEntries == nil))\n-    {\n-        NSLog(@\"Error while fetching\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    if([taskEntries count] ==0){\n-        return nil;\n-    }else{\n-        return [taskEntries objectAtIndex:0];\n-    }\n-    \n-}\n-\n-\n -(NSManagedObject*)fetchTaskOfTimestamp:(NSNumber*)timestamp{\n     \n     NSArray* taskEntries=nil;\n@@ -789,236 +312,6 @@ static GBDataFacility* instance =nil;\n     \n }\n \n-\n--(NSManagedObject*)fetchDocEntryByMD5:(NSString *)md5 andFileName:(NSString*)fileName{\n-    \n-    NSArray* docEntries =nil;\n-    NSFetchRequest *fetchRequest = [model \n-                                    fetchRequestFromTemplateWithName:@\"fetchDocEntryByMD5AndFileName\"\n-                                    substitutionVariables:\n-                                    [NSDictionary dictionaryWithObjectsAndKeys:md5,@\"md5\", \n-                                                                                fileName,@\"fileName\",nil]];\n-    NSError* error=nil;\n-    \n-    docEntries = [context executeFetchRequest:fetchRequest error:&error];\n-    \n-    if ((error != nil) || (docEntries == nil))\n-    {\n-        NSLog(@\"Error while fetching\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    \n-    if([docEntries count] ==0){\n-        return nil;\n-    }\n-    \n-    return [docEntries objectAtIndex:0];\n-\n-}\n-                \n--(NSManagedObject*)fetchLocalPathEntryByPathString:(NSString*)pathString{\n-    NSError * error =nil;\n-    NSArray * localPathEntries = nil;\n-    NSFetchRequest *fetchPathRequest = [model \n-                                        fetchRequestFromTemplateWithName:@\"fetchLocalPathByStringValue\"\n-                                        substitutionVariables:[NSDictionary dictionaryWithObject:pathString forKey:@\"pathString\"]];\n-    \n-    localPathEntries = [context executeFetchRequest:fetchPathRequest error:&error];\n-    \n-    if ((error != nil) || (localPathEntries == nil))\n-    {\n-        NSLog(@\"Error while fetching\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    if([localPathEntries count] ==0){\n-        return nil;\n-    }\n-    return [localPathEntries objectAtIndex:0];\n-}                \n-\n-\n--(NSManagedObject*)fetchDocEntryByIdentifier:(NSString*) identifier {\n-    \n-    NSArray* docEntries =nil;\n-    NSFetchRequest *fetchRequest = [model \n-                                    fetchRequestFromTemplateWithName:@\"fetchDocEntryByIdentifier\"\n-                                    substitutionVariables:\n-                                    [NSDictionary dictionaryWithObjectsAndKeys:identifier,@\"docEntryIdentifier\", nil]];\n-    NSError* error=nil;\n-    docEntries = [context executeFetchRequest:fetchRequest error:&error];\n-    \n-    if ((error != nil) || (docEntries == nil))\n-    {\n-        NSLog(@\"Error while fetching\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    if([docEntries count] ==0){\n-        return nil;\n-    }\n-    \n-    return [docEntries objectAtIndex:0];\n-\n-}\n-\n-\n--(NSManagedObject*)fetchCollectionByIdentifier:(NSString*) identifier {\n-    \n-    NSArray* collections =nil;\n-    if(identifier==nil){\n-        return nil;\n-    }\n-    NSFetchRequest *fetchRequest = [model \n-                                    fetchRequestFromTemplateWithName:@\"fetchCollectionByIdentifier\"\n-                                    substitutionVariables:[NSDictionary dictionaryWithObject:identifier forKey:@\"collectionIdentifier\"]];\n-    \n-    NSError* error=nil;\n-    collections = [context executeFetchRequest:fetchRequest error:&error];\n-    \n-    if ((error != nil) || (collections == nil))\n-    {\n-        NSLog(@\"Error while fetching\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    \n-    if([collections count] ==0){\n-        return nil;\n-    }\n-    \n-    return [collections objectAtIndex:0];\n-\n-}\n-\n-\n--(NSString*) identifierForEntryAtLocalPath:(NSString*)pathString{\n-    if([self isLocalPathEntryExistByPathString:pathString]){\n-        NSManagedObject *mo = [self fetchLocalPathEntryByPathString:pathString];\n-        NSManagedObject* uniqueEntry= nil;\n-        if([mo valueForKey:@\"isFile\"]){\n-            uniqueEntry = [mo valueForKey:@\"uniqueDocEntry\"];\n-        }else{\n-            uniqueEntry = [mo valueForKey:@\"uniqueCollection\"];\n-        }\n-        NSString* identifier =  [uniqueEntry valueForKey:@\"identifier\"];\n-        if(identifier !=nil){\n-            return identifier;\n-        }else{\n-            //This means the file is not uploaded yet, so the identifier is not generated yet.\n-            [GBUtility displayAlert:@\"The file not uploaded yet\" format:@\"%@\",@\"The file need time to upload\"];\\\n-            return nil;\n-        }\n-    }else{\n-        //This branch is possible when the file is just added to the local folder. But the local file system event handler is not ready to server this change and add this path item to the Core Data Facility\n-        [GBUtility displayAlert:@\"File not synced yet.\" format:@\"%@\",@\"This information indeed shall not appear, in identifierForEntryAtLocalPath\"];\n-        return nil;\n-    }\n-    \n-}\n-/*\n--(void)checkServerCollectionsForPossibleTask:(NSArray*)collections{\n-    \n-    for(NSManagedObject* mo in collections){\n-        NSArray* pathEntries = [mo valueForKey:@\"localPaths\"];\n-        for(NSManagedObject* pathMO in pathEntries){\n-            NSString* pathString = [pathMO valueForKey:@\"stringValue\"];\n-            \n-            if([localInfoDic objectForKey:pathString]==nil){\n-                //The local directory \n- ]is not exist\n-                //[GBUtility createLocalFolderAtPath:[pathMO valueForKey:@\"stringValue\"]];\n-                [self insertEvent:0\n-                    withEventCode:kGBServerNewCollection\n-                         operandA:[mo valueForKey:@\"identifier\"]\n-                      andOperandB:pathString];\n-            }\n-            //If the local directory is exist, then nothing have to be done.\n-        }\n-    }\n-}\n-\n-\n--(void)checkServerEntriesForPossibleTask:(NSArray*)docEntries{\n-    \n-    for(NSManagedObject* mo in docEntries){\n-        NSSet* pathEntities =  [mo valueForKey:@\"localPaths\"];\n-        NSString* serverMD5 = [mo valueForKey:@\"md5Checksum\"];\n-        \n-        NSString* existPath = nil;\n-        NSMutableSet *notExistPathSet = [[NSMutableSet alloc]init];\n-        NSMutableSet* pathStrings = [[NSMutableSet alloc]init ];\n-        \n-        for(NSManagedObject* pathMO in pathEntities){\n-            NSString* pathString = [pathMO valueForKey:@\"stringValue\"];\n-            [pathStrings addObject:pathString];\n-        }\n-        // judge if the file exist at the root path.\n-        //[pathStrings addObject:[mo valueForKey:@\"title\"]];\n-        \n-        for(NSString* pathString in pathStrings){\n-            BOOL isExist = NO;\n-            NSDictionary *fileAttributes =[localInfoDic objectForKey:pathString];\n-            if(fileAttributes!=nil){\n-                if(serverMD5){\n-                    if([serverMD5 isEqualToString:[fileAttributes valueForKey:kGBFileAttributeMD5]]){\n-                        existPath = pathString;\n-                        isExist =YES;\n-                        \n-                    }else{\n-                        //If the local file exist but not the same file ,rename the local file \n-\n-                    }\n-                }else{\n-                    [self insertEvent:0\n-                        withEventCode:kGBServerNoMD5ConflictedFileExist \n-                             operandA:[mo valueForKey:@\"identifier\"]\n-                          andOperandB:nil];\n-                }\n-\n-            }else{\n-                //when the file is not exist and the file has no md5 download it \n-                //Now ignore all no md5 entry\n-            }\n-            \n-            if(isExist ==NO){\n-                [notExistPathSet addObject:pathString];\n-            }\n-        }\n-        \n-        NSString* possibleExistPath = [[localMD5Dic valueForKey:serverMD5] anyObject];\n-        if(possibleExistPath!=nil){\n-            existPath = possibleExistPath;\n-        }\n-\n-        if(existPath != nil){\n-            //The file exist somewhere in the local directory, so copy operation is needed to sync the file to each of the path.\n-            NSManagedObject * pathEntryMO = [self InsertLocalPathOf:YES \n-                                                          AndSaveBy:[GBUtility simplifyLocalPath:existPath] ];\n-            [pathEntryMO setValue:mo forKey:@\"uniqueDocEntry\"];\n-            \n-            if([notExistPathSet count ]!=0){\n-                [self insertEvent:0\n-                    withEventCode:kGBFileExistPathsSubSet\n-                         operandA:[mo valueForKey:@\"identifier\"]\n-                      andOperandB:[pathEntryMO valueForKey:@\"stringValue\"]];\n-            }\n-            \n-        }else{\n-            //The file is definitely not exist, so treat it a new file.\n-            if(serverMD5 != nil){\n-                [self insertEvent:0\n-                    withEventCode:kGBServerNewFile\n-                         operandA:[mo valueForKey:@\"identifier\"]\n-                      andOperandB:nil];\n-                \n-            }\n-        }\n-        \n-    }\n-}\n-*/\n -(NSManagedObject*) moForMOID:(NSManagedObjectID*)moid{\n \n     return [context objectWithID:moid];",
      "status": "modified",
      "deletions": 709,
      "additions": 2,
      "blob_url": "https://github.com/theplant/GBox/blob/b45a314bd94233ac46af54e589763789d040906e/GBox/GBDataFacility.m",
      "changes": 711,
      "filename": "GBox/GBDataFacility.m",
      "sha": "b45a314bd94233ac46af54e589763789d040906e",
      "raw_url": "https://github.com/theplant/GBox/raw/b45a314bd94233ac46af54e589763789d040906e/GBox/GBDataFacility.m"
    },
    {
      "patch": "--- a/GBox/GBDocEntryEntity.h\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-//\n-//  GBDocEntryEntity.h\n-//  GBox\n-//\n-//  Created by XiaoyiChen on 7/28/11.\n-//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.\n-//\n-\n-#import <Foundation/Foundation.h>\n-#import <CoreData/CoreData.h>\n-\n-@class GBCollectionEntity, GBLocalPathEntity;\n-\n-@interface GBDocEntryEntity : NSManagedObject {\n-@private\n-}\n-@property (nonatomic, retain) NSString * ETag;\n-@property (nonatomic, retain) NSString * identifier;\n-@property (nonatomic, retain) NSString * localTitle;\n-@property (nonatomic, retain) NSString * md5Checksum;\n-@property (nonatomic, retain) NSString * resourceID;\n-@property (nonatomic, retain) NSString * title;\n-@property (nonatomic, retain) NSDate * updatedDate;\n-@property (nonatomic, retain) NSSet *localPaths;\n-@property (nonatomic, retain) NSSet *parentCollections;\n-@end\n-\n-@interface GBDocEntryEntity (CoreDataGeneratedAccessors)\n-\n-- (void)addLocalPathsObject:(GBLocalPathEntity *)value;\n-- (void)removeLocalPathsObject:(GBLocalPathEntity *)value;\n-- (void)addLocalPaths:(NSSet *)values;\n-- (void)removeLocalPaths:(NSSet *)values;\n-\n-- (void)addParentCollectionsObject:(GBCollectionEntity *)value;\n-- (void)removeParentCollectionsObject:(GBCollectionEntity *)value;\n-- (void)addParentCollections:(NSSet *)values;\n-- (void)removeParentCollections:(NSSet *)values;\n-\n-@end",
      "status": "removed",
      "deletions": 40,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBDocEntryEntity.h",
      "changes": 40,
      "filename": "GBox/GBDocEntryEntity.h",
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "raw_url": "https://github.com/theplant/GBox/raw/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBDocEntryEntity.h"
    },
    {
      "patch": "--- a/GBox/GBDocEntryEntity.m\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-//\n-//  GBDocEntryEntity.m\n-//  GBox\n-//\n-//  Created by XiaoyiChen on 7/28/11.\n-//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.\n-//\n-\n-#import \"GBDocEntryEntity.h\"\n-#import \"GBCollectionEntity.h\"\n-#import \"GBLocalPathEntity.h\"\n-\n-\n-@implementation GBDocEntryEntity\n-@dynamic ETag;\n-@dynamic identifier;\n-@dynamic localTitle;\n-@dynamic md5Checksum;\n-@dynamic resourceID;\n-@dynamic title;\n-@dynamic updatedDate;\n-@dynamic localPaths;\n-@dynamic parentCollections;\n-\n-@end",
      "status": "removed",
      "deletions": 25,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBDocEntryEntity.m",
      "changes": 25,
      "filename": "GBox/GBDocEntryEntity.m",
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "raw_url": "https://github.com/theplant/GBox/raw/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBDocEntryEntity.m"
    },
    {
      "patch": "--- a/GBox/GBLocalPathEntity.h\n+++ /dev/null\n@@ -1,22 +0,0 @@\n-//\n-//  GBLocalPathEntity.h\n-//  GBox\n-//\n-//  Created by XiaoyiChen on 7/28/11.\n-//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.\n-//\n-\n-#import <Foundation/Foundation.h>\n-#import <CoreData/CoreData.h>\n-\n-@class GBCollectionEntity, GBDocEntryEntity;\n-\n-@interface GBLocalPathEntity : NSManagedObject {\n-@private\n-}\n-@property (nonatomic, retain) NSNumber * isFile;\n-@property (nonatomic, retain) NSString * stringValue;\n-@property (nonatomic, retain) GBCollectionEntity *uniqueCollection;\n-@property (nonatomic, retain) GBDocEntryEntity *uniqueDocEntry;\n-\n-@end",
      "status": "removed",
      "deletions": 22,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBLocalPathEntity.h",
      "changes": 22,
      "filename": "GBox/GBLocalPathEntity.h",
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "raw_url": "https://github.com/theplant/GBox/raw/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBLocalPathEntity.h"
    },
    {
      "patch": "--- a/GBox/GBLocalPathEntity.m\n+++ /dev/null\n@@ -1,20 +0,0 @@\n-//\n-//  GBLocalPathEntity.m\n-//  GBox\n-//\n-//  Created by XiaoyiChen on 7/28/11.\n-//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.\n-//\n-\n-#import \"GBLocalPathEntity.h\"\n-#import \"GBCollectionEntity.h\"\n-#import \"GBDocEntryEntity.h\"\n-\n-\n-@implementation GBLocalPathEntity\n-@dynamic isFile;\n-@dynamic stringValue;\n-@dynamic uniqueCollection;\n-@dynamic uniqueDocEntry;\n-\n-@end",
      "status": "removed",
      "deletions": 20,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBLocalPathEntity.m",
      "changes": 20,
      "filename": "GBox/GBLocalPathEntity.m",
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "raw_url": "https://github.com/theplant/GBox/raw/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/GBLocalPathEntity.m"
    },
    {
      "patch": "--- a/GBox/GBSyncController.h\n+++ b/GBox/GBSyncController.h\n@@ -61,8 +61,6 @@\n -(void)beginSync;\n -(void)cancelSync;\n \n--(void)clearData;\n-\n -(void)setStatusItem:(NSStatusItem*)item;\n \n @end",
      "status": "modified",
      "deletions": 2,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/b45a314bd94233ac46af54e589763789d040906e/GBox/GBSyncController.h",
      "changes": 2,
      "filename": "GBox/GBSyncController.h",
      "sha": "b45a314bd94233ac46af54e589763789d040906e",
      "raw_url": "https://github.com/theplant/GBox/raw/b45a314bd94233ac46af54e589763789d040906e/GBox/GBSyncController.h"
    },
    {
      "patch": "--- a/GBox/GBSyncController.m\n+++ b/GBox/GBSyncController.m\n@@ -256,7 +256,7 @@ static GBSyncController * shareSyncController = nil;\n                                 withEventCode:kGBServerNoMD5FileExist\n                                      operandA:entryIdentifier\n                                      operandB:nil\n-                           andStateWithouSave:kGBStateCancel];\n+                                     andState:kGBStateCancel];\n                     continue;\n                 }\n                 ",
      "status": "modified",
      "deletions": 1,
      "additions": 1,
      "blob_url": "https://github.com/theplant/GBox/blob/b45a314bd94233ac46af54e589763789d040906e/GBox/GBSyncController.m",
      "changes": 2,
      "filename": "GBox/GBSyncController.m",
      "sha": "b45a314bd94233ac46af54e589763789d040906e",
      "raw_url": "https://github.com/theplant/GBox/raw/b45a314bd94233ac46af54e589763789d040906e/GBox/GBSyncController.m"
    },
    {
      "patch": "--- a/GBox/GBoxAppDelegate.m\n+++ b/GBox/GBoxAppDelegate.m\n@@ -184,8 +184,7 @@\n     [defaults setBool:NO forKey:kGBSetupFinished];\n     [defaults synchronize];\n     [syncController cancelSync];\n-    \n-    [syncController clearData];\n+    //Clear Data \n     [self appSetup];\n }\n \n@@ -298,29 +297,6 @@\n } \n \n \n-\n--(void)eventsPreprocess{\n-    GBDataFacility* dataFacility = [GBDataFacility sharedDataFacility];\n-    NSArray* waitingTasks = [dataFacility fetchTaskOfState:kGBStateWaiting];\n-    \n-    NSMutableDictionary* operandToMO = [[NSMutableDictionary alloc]init];\n-    NSArray* operandsArray = [operandToMO allKeys];\n-    NSArray* MOsArray = [operandToMO allValues];\n-    for(NSManagedObject* mo in waitingTasks){\n-        NSUInteger eventCode = [[mo valueForKey:@\"eventCode\"]integerValue];\n-        NSString* operandA = [mo valueForKey:@\"operandA\"];\n-        NSString* operandB = [mo valueForKey:@\"operandB\"];\n-        if(eventCode == kGBLocalNewFile || eventCode ==kGBLocalFileUpdated || eventCode ==kGBLocalNewCollection ){\n-            NSManagedObject* possibleExistMO = [operandToMO valueForKey:operandA];\n-            if(possibleExistMO!=nil){\n-                \n-            }\n-        }\n-        \n-    }\n-\n-}\n-\n /*\n -(void)fetchLocalFileSystemInfo:(NSTimer*)timer{\n     fileSystemInfo = [GBFileSystemInfo sharedFileSystemInfo];",
      "status": "modified",
      "deletions": 25,
      "additions": 1,
      "blob_url": "https://github.com/theplant/GBox/blob/b45a314bd94233ac46af54e589763789d040906e/GBox/GBoxAppDelegate.m",
      "changes": 26,
      "filename": "GBox/GBoxAppDelegate.m",
      "sha": "b45a314bd94233ac46af54e589763789d040906e",
      "raw_url": "https://github.com/theplant/GBox/raw/b45a314bd94233ac46af54e589763789d040906e/GBox/GBoxAppDelegate.m"
    },
    {
      "patch": "--- a/GBox/testModel.xcdatamodeld/.xccurrentversion\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n-<plist version=\"1.0\">\n-<dict/>\n-</plist>",
      "status": "removed",
      "deletions": 5,
      "additions": 0,
      "blob_url": "https://github.com/theplant/GBox/blob/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/testModel.xcdatamodeld/.xccurrentversion",
      "changes": 5,
      "filename": "GBox/testModel.xcdatamodeld/.xccurrentversion",
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "raw_url": "https://github.com/theplant/GBox/raw/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e/GBox/testModel.xcdatamodeld/.xccurrentversion"
    }
  ],
  "stats": {
    "deletions": 1028,
    "additions": 6,
    "total": 1034
  },
  "parents": [
    {
      "sha": "c9f0b9ec9bb6782e8e73968917986c3f21e83c2e",
      "url": "https://api.github.com/repos/theplant/GBox/commits/c9f0b9ec9bb6782e8e73968917986c3f21e83c2e"
    }
  ],
  "sha": "b45a314bd94233ac46af54e589763789d040906e",
  "commit": {
    "tree": {
      "sha": "61f4006373f4a49dc07e616a959bec0492706119",
      "url": "https://api.github.com/repos/theplant/GBox/git/trees/61f4006373f4a49dc07e616a959bec0492706119"
    },
    "message": "Remove history code in data facility",
    "committer": {
      "date": "2011-09-04T23:40:51-07:00",
      "name": "Xiaoyi Chen",
      "email": "xiaoyi.chen@hotmail.com"
    },
    "author": {
      "date": "2011-09-04T23:40:51-07:00",
      "name": "Xiaoyi Chen",
      "email": "xiaoyi.chen@hotmail.com"
    },
    "url": "https://api.github.com/repos/theplant/GBox/git/commits/b45a314bd94233ac46af54e589763789d040906e"
  },
  "url": "https://api.github.com/repos/theplant/GBox/commits/b45a314bd94233ac46af54e589763789d040906e"
}
