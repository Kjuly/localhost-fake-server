{
  "parents": [
    {
      "sha": "057cc872af2869fb81070ae14c64a305042e7a67",
      "url": "https://api.github.com/repos/theplant/GBox/commits/057cc872af2869fb81070ae14c64a305042e7a67"
    }
  ],
  "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
  "commit": {
    "message": "Update auth2 library, using new method call maybe fix crash when network not stable.",
    "tree": {
      "sha": "234347e5e3b31ad1f90892edb8f0406fb42a0acd",
      "url": "https://api.github.com/repos/theplant/GBox/git/trees/234347e5e3b31ad1f90892edb8f0406fb42a0acd"
    },
    "author": {
      "email": "xiaoyi.chen@hotmail.com",
      "date": "2011-08-30T20:17:10-07:00",
      "name": "Xiaoyi Chen"
    },
    "committer": {
      "email": "xiaoyi.chen@hotmail.com",
      "date": "2011-08-30T20:17:10-07:00",
      "name": "Xiaoyi Chen"
    },
    "url": "https://api.github.com/repos/theplant/GBox/git/commits/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247"
  },
  "author": {
    "avatar_url": "https://secure.gravatar.com/avatar/38eb4e6b823b7e406e11de34be7fe61d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "login": "chenxiaoyi",
    "id": 877966,
    "url": "https://api.github.com/users/chenxiaoyi"
  },
  "files": [
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/OAuthController.m",
      "changes": 10,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 5,
      "filename": "GBox/OAuthController.m",
      "deletions": 5,
      "patch": "--- a/GBox/OAuthController.m\n+++ b/GBox/OAuthController.m\n@@ -119,11 +119,11 @@ static NSString *const clientSecret = @\"4m4EIkvzMXtCVqrDG05RGEGi\";\n     \n     NSBundle *frameworkBundle = [NSBundle bundleForClass:[GTMOAuth2WindowController class]];\n     GTMOAuth2WindowController *windowController;\n-    windowController = [[[GTMOAuth2WindowController alloc] initWithScope:scope\n-                                                                clientID:clientID\n-                                                            clientSecret:clientSecret\n-                                                        keychainItemName:kKeychainItemName\n-                                                          resourceBundle:frameworkBundle] autorelease];\n+    windowController = [GTMOAuth2WindowController controllerWithScope:scope\n+                                                             clientID:clientID\n+                                                         clientSecret:clientSecret\n+                                                     keychainItemName:kKeychainItemName\n+                                                       resourceBundle:frameworkBundle];\n     \n     NSString *html = @\"<html><body><div align=center>Loading sign-in page...</div></body></html>\";\n     [windowController setInitialHTMLString:html];",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/OAuthController.m"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2Authentication.h",
      "changes": 18,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 13,
      "filename": "GBox/Source/OAuth2/GTMOAuth2Authentication.h",
      "deletions": 5,
      "patch": "--- a/GBox/Source/OAuth2/GTMOAuth2Authentication.h\n+++ b/GBox/Source/OAuth2/GTMOAuth2Authentication.h\n@@ -13,7 +13,7 @@\n  * limitations under the License.\n  */\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n // This class implements the OAuth 2 protocol for authorizing requests.\n // http://tools.ietf.org/html/draft-ietf-oauth-v2\n@@ -37,6 +37,12 @@\n   #define _INITIALIZE_AS(x)\n #endif\n \n+// Until all OAuth 2 providers are up to the same spec, we'll provide a crude\n+// way here to override the \"Bearer\" string in the Authorization header\n+#ifndef GTM_OAUTH2_BEARER\n+#define GTM_OAUTH2_BEARER \"Bearer\"\n+#endif\n+\n // Service provider name allows stored authorization to be associated with\n // the authorizing service\n _EXTERN NSString* const kGTMOAuth2ServiceProviderGoogle _INITIALIZE_AS(@\"Google\");\n@@ -103,7 +109,7 @@ _EXTERN NSString* const kGTMOAuth2NetworkFound        _INITIALIZE_AS(@\"kGTMOAuth\n   GTMHTTPFetcher *refreshFetcher_;\n   NSMutableArray *authorizationQueue_;\n \n-  id <GTMHTTPFetcherServiceProtocol> fetcherService_;\n+  id <GTMHTTPFetcherServiceProtocol> fetcherService_; // WEAK\n \n   Class parserClass_;\n \n@@ -171,7 +177,10 @@ _EXTERN NSString* const kGTMOAuth2NetworkFound        _INITIALIZE_AS(@\"kGTMOAuth\n \n // Property for the optional fetcher service instance to be used to create\n // fetchers\n-@property (retain) id <GTMHTTPFetcherServiceProtocol> fetcherService;\n+//\n+// Fetcher service objects retain authorizations, so this is weak to avoid\n+// circular retains.\n+@property (assign) id <GTMHTTPFetcherServiceProtocol> fetcherService; // WEAK\n \n // Alternative JSON parsing class; this should implement the\n // GTMOAuth2ParserClass informal protocol. If this property is\n@@ -239,7 +248,6 @@ _EXTERN NSString* const kGTMOAuth2NetworkFound        _INITIALIZE_AS(@\"kGTMOAuth\n - (NSString *)userAgent;\n \n // Parse and set token and token secret from response data\n-- (void)setKeysForResponseData:(NSData *)data;\n - (void)setKeysForResponseString:(NSString *)str;\n - (void)setKeysForResponseDictionary:(NSDictionary *)dict;\n \n@@ -282,4 +290,4 @@ _EXTERN NSString* const kGTMOAuth2NetworkFound        _INITIALIZE_AS(@\"kGTMOAuth\n + (NSString *)scopeWithStrings:(NSString *)firsStr, ... NS_REQUIRES_NIL_TERMINATION;\n @end\n \n-#endif // GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2Authentication.h"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2Authentication.m",
      "changes": 105,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 57,
      "filename": "GBox/Source/OAuth2/GTMOAuth2Authentication.m",
      "deletions": 48,
      "patch": "--- a/GBox/Source/OAuth2/GTMOAuth2Authentication.m\n+++ b/GBox/Source/OAuth2/GTMOAuth2Authentication.m\n@@ -13,7 +13,7 @@\n  * limitations under the License.\n  */\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #define GTMOAUTH2AUTHENTICATION_DEFINE_GLOBALS 1\n #import \"GTMOAuth2Authentication.h\"\n@@ -102,12 +102,12 @@ static NSString *const kRefreshFetchArgsKey = @\"requestArgs\";\n }\n \n - (void)dealloc {\n-  self.request = nil;\n-  self.delegate = nil;\n-  self.selector = NULL;\n-  self.completionHandler = nil;\n-  self.thread = nil;\n-  self.error = nil;\n+  [request_ release];\n+  [delegate_ release];\n+  [completionHandler_ release];\n+  [thread_ release];\n+  [error_ release];\n+\n   [super dealloc];\n }\n @end\n@@ -200,8 +200,8 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n - (id)init {\n   self = [super init];\n   if (self) {\n-    self.authorizationQueue = [NSMutableArray array];\n-    self.parameters = [NSMutableDictionary dictionary];\n+    authorizationQueue_ = [[NSMutableArray alloc] init];\n+    parameters_ = [[NSMutableDictionary alloc] init];\n   }\n   return self;\n }\n@@ -224,22 +224,16 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n }\n \n - (void)dealloc {\n-  self.clientID = nil;\n-  self.clientSecret = nil;\n-  self.redirectURI = nil;\n-\n-  self.parameters = nil;\n-\n-  self.tokenURL = nil;\n-  self.expirationDate = nil;\n-\n-  self.refreshFetcher = nil;\n-  self.authorizationQueue = nil;\n-\n-  self.fetcherService = nil;\n-\n-  self.userData = nil;\n-  self.properties = nil;\n+  [clientID_ release];\n+  [clientSecret_ release];\n+  [redirectURI_ release];\n+  [parameters_ release];\n+  [tokenURL_ release];\n+  [expirationDate_ release];\n+  [refreshFetcher_ release];\n+  [authorizationQueue_ release];\n+  [userData_ release];\n+  [properties_ release];\n \n   [super dealloc];\n }\n@@ -280,11 +274,6 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n   // NSLog(@\"keys set ----------------------------\\n%@\", dict);\n }\n \n-- (void)setKeysForResponseData:(NSData *)data {\n-  NSDictionary *dict = [[self class] dictionaryWithResponseData:data];\n-  [self setKeysForResponseDictionary:dict];\n-}\n-\n - (void)setKeysForResponseString:(NSString *)str {\n   NSDictionary *dict = [[self class] dictionaryWithResponseString:str];\n   [self setKeysForResponseDictionary:dict];\n@@ -480,7 +469,8 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n   if (isAuthorizableRequest && [accessToken length] > 0) {\n     if (request) {\n       // we have a likely valid access token\n-      NSString *value = [@\"OAuth \" stringByAppendingString:accessToken];\n+      NSString *value = [NSString stringWithFormat:@\"%s %@\",\n+                         GTM_OAUTH2_BEARER, accessToken];\n       [request setValue:value forHTTPHeaderField:@\"Authorization\"];\n     }\n \n@@ -581,11 +571,11 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n     if (!hasAccessToken) {\n       shouldRefresh = YES;\n     } else {\n-      // We'll consider the token expired if it expires 5 seconds from now\n+      // We'll consider the token expired if it expires 60 seconds from now\n       // or earlier\n       NSDate *expirationDate = self.expirationDate;\n       NSTimeInterval timeToExpire = [expirationDate timeIntervalSinceNow];\n-      if (expirationDate == nil || timeToExpire < 5.0) {\n+      if (expirationDate == nil || timeToExpire < 60.0) {\n         // access token has expired, or will in a few seconds\n         shouldRefresh = YES;\n       }\n@@ -686,6 +676,9 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n   id <GTMHTTPFetcherServiceProtocol> fetcherService = self.fetcherService;\n   if (fetcherService) {\n     fetcher = [fetcherService fetcherWithRequest:request];\n+\n+    // Don't use an authorizer for an auth token fetch\n+    fetcher.authorizer = nil;\n   } else {\n     fetcher = [GTMHTTPFetcher fetcherWithRequest:request];\n   }\n@@ -727,27 +720,43 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n   [self notifyFetchIsRunning:NO fetcher:fetcher type:nil];\n \n   if (error) {\n-    // Failed\n-    NSDictionary *errorJson = [self dictionaryWithJSONData:data];\n-    if ([errorJson count] > 0) {\n+    // Failed; if the error body is JSON, parse it and add it to the error's\n+    // userInfo dictionary\n+    if ([data length] > 0) {\n+      NSDictionary *responseHeaders = [fetcher responseHeaders];\n+      NSString *responseType = [responseHeaders valueForKey:@\"Content-Type\"];\n+      if ([responseType hasPrefix:@\"application/json\"]) {\n+        NSDictionary *errorJson = [self dictionaryWithJSONData:data];\n+        if ([errorJson count] > 0) {\n #if DEBUG\n-      NSLog(@\"Error %@\\nError data:\\n%@\", error, errorJson);\n+          NSLog(@\"Error %@\\nError data:\\n%@\", error, errorJson);\n #endif\n-      // Add the JSON error body to the userInfo of the error\n-      NSMutableDictionary *userInfo;\n-      userInfo = [NSMutableDictionary dictionaryWithObject:errorJson\n-                                                    forKey:kGTMOAuth2ErrorJSONKey];\n-      NSDictionary *prevUserInfo = [error userInfo];\n-      if (prevUserInfo) {\n-        [userInfo addEntriesFromDictionary:prevUserInfo];\n+          // Add the JSON error body to the userInfo of the error\n+          NSMutableDictionary *userInfo;\n+          userInfo = [NSMutableDictionary dictionaryWithObject:errorJson\n+                                                        forKey:kGTMOAuth2ErrorJSONKey];\n+          NSDictionary *prevUserInfo = [error userInfo];\n+          if (prevUserInfo) {\n+            [userInfo addEntriesFromDictionary:prevUserInfo];\n+          }\n+          error = [NSError errorWithDomain:[error domain]\n+                                      code:[error code]\n+                                  userInfo:userInfo];\n+        }\n       }\n-      error = [NSError errorWithDomain:[error domain]\n-                                  code:[error code]\n-                              userInfo:userInfo];\n     }\n   } else {\n     // Succeeded; we have an access token\n     [self setKeysForResponseJSONData:data];\n+\n+#if DEBUG\n+    // Watch for token exchanges that return a non-bearer or unlabeled token\n+    NSString *tokenType = [self tokenType];\n+    if (tokenType == nil\n+        || [tokenType caseInsensitiveCompare:@\"bearer\"] != NSOrderedSame) {\n+      NSLog(@\"GTMOAuth2: Unexpected token type: %@\", tokenType);\n+    }\n+#endif\n   }\n \n   id delegate = [fetcher propertyForKey:kTokenFetchDelegateKey];\n@@ -1087,4 +1096,4 @@ finishedRefreshWithFetcher:(GTMHTTPFetcher *)fetcher\n \n @end\n \n-#endif // GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2Authentication.m"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2SignIn.h",
      "changes": 33,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 27,
      "filename": "GBox/Source/OAuth2/GTMOAuth2SignIn.h",
      "deletions": 6,
      "patch": "--- a/GBox/Source/OAuth2/GTMOAuth2SignIn.h\n+++ b/GBox/Source/OAuth2/GTMOAuth2SignIn.h\n@@ -43,7 +43,7 @@\n // when explicitly canceled by calling cancelSigningIn\n //\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #import <Foundation/Foundation.h>\n #import <SystemConfiguration/SystemConfiguration.h>\n@@ -59,6 +59,7 @@\n \n   // the endpoint for displaying the sign-in page\n   NSURL *authorizationURL_;\n+  NSDictionary *additionalAuthorizationParameters_;\n \n   id delegate_;\n   SEL webRequestSelector_;\n@@ -68,7 +69,11 @@\n \n   GTMHTTPFetcher *pendingFetcher_;\n \n-  BOOL shouldFetchGoogleUserInfo_;\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+  BOOL shouldFetchGoogleUserEmail_;\n+  BOOL shouldFetchGoogleUserProfile_;\n+  NSDictionary *userProfile_;\n+#endif\n \n   SCNetworkReachabilityRef reachabilityRef_;\n   NSTimer *networkLossTimer_;\n@@ -81,6 +86,7 @@\n @property (nonatomic, retain) GTMOAuth2Authentication *authentication;\n \n @property (nonatomic, retain) NSURL *authorizationURL;\n+@property (nonatomic, retain) NSDictionary *additionalAuthorizationParameters;\n \n // The delegate is released when signing in finishes or is cancelled\n @property (nonatomic, retain) id delegate;\n@@ -89,7 +95,16 @@\n \n @property (nonatomic, retain) id userData;\n \n-@property (nonatomic, assign) BOOL shouldFetchGoogleUserInfo;\n+// By default, signing in to Google will fetch the user's email, but will not\n+// fetch the user's profile.\n+//\n+// The email is saved in the auth object.\n+// The profile is available immediately after sign-in.\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+@property (nonatomic, assign) BOOL shouldFetchGoogleUserEmail;\n+@property (nonatomic, assign) BOOL shouldFetchGoogleUserProfile;\n+@property (nonatomic, retain, readonly) NSDictionary *userProfile;\n+#endif\n \n // The default timeout for an unreachable network during display of the\n // sign-in page is 30 seconds; set this to 0 to have no timeout\n@@ -105,9 +120,11 @@\n             finishedSelector:(SEL)finishedSelector;\n \n // A default authentication object for signing in to Google services\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)standardGoogleAuthenticationForScope:(NSString *)scope\n                                                          clientID:(NSString *)clientID\n                                                      clientSecret:(NSString *)clientSecret;\n+#endif\n \n #pragma mark Methods used by the Window Controller\n \n@@ -137,15 +154,19 @@\n #pragma mark -\n \n // Revocation of an authorized token from Google\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth;\n+#endif\n \n #pragma mark -\n \n-// Standard values for authenticating to Google\n+// Standard authentication values\n++ (NSString *)nativeClientRedirectURI;\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (NSURL *)googleAuthorizationURL;\n + (NSURL *)googleTokenURL;\n-+ (NSString *)googleRedirectURI;\n+#endif\n \n @end\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2SignIn.h"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2SignIn.m",
      "changes": 121,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 91,
      "filename": "GBox/Source/OAuth2/GTMOAuth2SignIn.m",
      "deletions": 30,
      "patch": "--- a/GBox/Source/OAuth2/GTMOAuth2SignIn.m\n+++ b/GBox/Source/OAuth2/GTMOAuth2SignIn.m\n@@ -13,7 +13,7 @@\n  * limitations under the License.\n  */\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #define GTMOAUTH2SIGNIN_DEFINE_GLOBALS 1\n #import \"GTMOAuth2SignIn.h\"\n@@ -28,16 +28,26 @@ static const NSTimeInterval kDefaultNetworkLossTimeoutInterval = 30.0;\n //\n NSString *const kOOBString = @\"urn:ietf:wg:oauth:2.0:oob\";\n \n+\n+@interface GTMOAuth2Authentication (InternalMethods)\n+- (NSDictionary *)dictionaryWithJSONData:(NSData *)data;\n+@end\n+\n @interface GTMOAuth2SignIn ()\n @property (assign) BOOL hasHandledCallback;\n @property (retain) GTMHTTPFetcher *pendingFetcher;\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+@property (nonatomic, retain, readwrite) NSDictionary *userProfile;\n+#endif\n \n - (void)invokeFinalCallbackWithError:(NSError *)error;\n \n - (BOOL)startWebRequest;\n + (NSMutableURLRequest *)mutableURLRequestWithURL:(NSURL *)oldURL\n                                       paramString:(NSString *)paramStr;\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n - (void)fetchGoogleUserInfo;\n+#endif\n \n - (void)handleCallbackReached;\n \n@@ -45,9 +55,11 @@ NSString *const kOOBString = @\"urn:ietf:wg:oauth:2.0:oob\";\n finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n        error:(NSError *)error;\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n - (void)infoFetcher:(GTMHTTPFetcher *)fetcher\n    finishedWithData:(NSData *)data\n               error:(NSError *)error;\n+#endif\n \n - (void)closeTheWindow;\n \n@@ -63,6 +75,7 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n @synthesize authentication = auth_;\n \n @synthesize authorizationURL = authorizationURL_;\n+@synthesize additionalAuthorizationParameters = additionalAuthorizationParameters_;\n \n @synthesize delegate = delegate_;\n @synthesize webRequestSelector = webRequestSelector_;\n@@ -71,9 +84,15 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n @synthesize pendingFetcher = pendingFetcher_;\n @synthesize userData = userData_;\n \n-@synthesize shouldFetchGoogleUserInfo = shouldFetchGoogleUserInfo_;\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+@synthesize shouldFetchGoogleUserEmail = shouldFetchGoogleUserEmail_;\n+@synthesize shouldFetchGoogleUserProfile = shouldFetchGoogleUserProfile_;\n+@synthesize userProfile = userProfile_;\n+#endif\n+\n @synthesize networkLossTimeoutInterval = networkLossTimeoutInterval_;\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (NSURL *)googleAuthorizationURL {\n   NSString *str = @\"https://accounts.google.com/o/oauth2/auth\";\n   return [NSURL URLWithString:str];\n@@ -83,15 +102,17 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n   NSString *str = @\"https://accounts.google.com/o/oauth2/token\";\n   return [NSURL URLWithString:str];\n }\n+#endif\n \n-+ (NSString *)googleRedirectURI {\n++ (NSString *)nativeClientRedirectURI {\n   return kOOBString;\n }\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)standardGoogleAuthenticationForScope:(NSString *)scope\n                                                          clientID:(NSString *)clientID\n                                                      clientSecret:(NSString *)clientSecret {\n-  NSString *redirectURI = [self googleRedirectURI];\n+  NSString *redirectURI = [self nativeClientRedirectURI];\n   NSURL *tokenURL = [self googleTokenURL];\n \n   GTMOAuth2Authentication *auth;\n@@ -104,6 +125,7 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n \n   return auth;\n }\n+#endif\n \n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n@@ -120,21 +142,23 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n   // designated initializer\n   self = [super init];\n   if (self) {\n-    self.authentication = auth;\n-    self.authorizationURL = authorizationURL;\n-    self.delegate = delegate;\n-    self.webRequestSelector = webRequestSelector;\n-    self.finishedSelector = finishedSelector;\n+    auth_ = [auth retain];\n+    authorizationURL_ = [authorizationURL retain];\n+    delegate_ = [delegate retain];\n+    webRequestSelector_ = webRequestSelector;\n+    finishedSelector_ = finishedSelector;\n \n     // for Google authentication, we want to automatically fetch user info\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n     NSString *host = [authorizationURL host];\n     if ([host isEqual:@\"accounts.google.com\"]) {\n-      self.shouldFetchGoogleUserInfo = YES;\n+      shouldFetchGoogleUserEmail_ = YES;\n     }\n+#endif\n \n     // default timeout for a lost internet connection while the server\n     // UI is displayed is 30 seconds\n-    self.networkLossTimeoutInterval = kDefaultNetworkLossTimeoutInterval;\n+    networkLossTimeoutInterval_ = kDefaultNetworkLossTimeoutInterval;\n   }\n   return self;\n }\n@@ -142,11 +166,15 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n - (void)dealloc {\n   [self stopReachabilityCheck];\n \n-  self.authentication = nil;\n-  self.authorizationURL = nil;\n-  self.delegate = nil;\n-  self.pendingFetcher = nil;\n-  self.userData = nil;\n+  [auth_ release];\n+  [authorizationURL_ release];\n+  [additionalAuthorizationParameters_ release];\n+  [delegate_ release];\n+  [pendingFetcher_ release];\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+  [userProfile_ release];\n+#endif\n+  [userData_ release];\n \n   [super dealloc];\n }\n@@ -175,18 +203,28 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n //  - tell the delegate we're finished\n //\n - (BOOL)startSigningIn {\n-  // for signing in to Google, append the scope for obtaining the authenticated\n-  // user info\n-  if (shouldFetchGoogleUserInfo_) {\n-    GTMOAuth2Authentication *auth = self.authentication;\n+  // For signing in to Google, append the scope for obtaining the authenticated\n+  // user email and profile, as appropriate\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+  GTMOAuth2Authentication *auth = self.authentication;\n+  if (self.shouldFetchGoogleUserEmail) {\n+    NSString *const emailScope = @\"https://www.googleapis.com/auth/userinfo.email\";\n+    NSString *scope = auth.scope;\n+    if ([scope rangeOfString:emailScope].location == NSNotFound) {\n+      scope = [GTMOAuth2Authentication scopeWithStrings:scope, emailScope, nil];\n+      auth.scope = scope;\n+    }\n+  }\n \n-    NSString *const uiScope = @\"https://www.googleapis.com/auth/userinfo#email\";\n+  if (self.shouldFetchGoogleUserProfile) {\n+    NSString *const profileScope = @\"https://www.googleapis.com/auth/userinfo.profile\";\n     NSString *scope = auth.scope;\n-    if ([scope rangeOfString:uiScope].location == NSNotFound) {\n-      scope = [GTMOAuth2Authentication scopeWithStrings:scope, uiScope, nil];\n+    if ([scope rangeOfString:profileScope].location == NSNotFound) {\n+      scope = [GTMOAuth2Authentication scopeWithStrings:scope, profileScope, nil];\n       auth.scope = scope;\n     }\n   }\n+#endif\n \n   // start the authorization\n   return [self startWebRequest];\n@@ -212,12 +250,17 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n   NSString *scope = auth.scope;\n   if ([scope length] == 0) scope = nil;\n \n-  NSDictionary *paramsDict = [NSDictionary dictionaryWithObjectsAndKeys:\n+  NSMutableDictionary *paramsDict = [NSMutableDictionary dictionaryWithObjectsAndKeys:\n                                      @\"code\", @\"response_type\",\n                                      clientID, @\"client_id\",\n                                      redirectURI, @\"redirect_uri\",\n                                      scope, @\"scope\", // scope may be nil\n                                      nil];\n+  NSDictionary *additionalParams = self.additionalAuthorizationParameters;\n+  if (additionalParams) {\n+    [paramsDict addEntriesFromDictionary:additionalParams];\n+  }\n+\n   NSString *paramStr = [GTMOAuth2Authentication encodedQueryParametersForDictionary:paramsDict];\n \n   NSURL *authorizationURL = self.authorizationURL;\n@@ -293,7 +336,7 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n \n   // when we're searching for the window title string, then we can ignore\n   // redirects\n-  NSString *standardURI = [[self class] googleRedirectURI];\n+  NSString *standardURI = [[self class] nativeClientRedirectURI];\n   if ([redirectURI isEqual:standardURI]) return NO;\n \n   // compare the redirectURI, which tells us when the web sign-in is done,\n@@ -446,8 +489,9 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n        error:(NSError *)error {\n   self.pendingFetcher = nil;\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n   if (error == nil\n-      && self.shouldFetchGoogleUserInfo\n+      && (self.shouldFetchGoogleUserEmail || self.shouldFetchGoogleUserProfile)\n       && [self.authentication.serviceProvider isEqual:kGTMOAuth2ServiceProviderGoogle]) {\n     // fetch the user's information from the Google server\n     [self fetchGoogleUserInfo];\n@@ -455,11 +499,15 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n     // we're not authorizing with Google, so we're done\n     [self invokeFinalCallbackWithError:error];\n   }\n+#else\n+  [self invokeFinalCallbackWithError:error];\n+#endif\n }\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n - (void)fetchGoogleUserInfo {\n   // fetch the user's email address\n-  NSString *infoURLStr = @\"https://www.googleapis.com/userinfo/email\";\n+  NSString *infoURLStr = @\"https://www.googleapis.com/oauth2/v1/userinfo\";\n   NSURL *infoURL = [NSURL URLWithString:infoURLStr];\n   NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:infoURL];\n \n@@ -512,13 +560,24 @@ finishedWithFetcher:(GTMHTTPFetcher *)fetcher\n     }\n #endif\n   } else {\n-    // we have the authenticated user's info\n+    // We have the authenticated user's info\n     if (data) {\n-      [auth setKeysForResponseData:data];\n+      NSDictionary *profileDict = [auth dictionaryWithJSONData:data];\n+      if (profileDict) {\n+        self.userProfile = profileDict;\n+\n+        // Save the email into the auth object\n+        NSString *email = [profileDict objectForKey:@\"email\"];\n+        [auth setUserEmail:email];\n+\n+        NSNumber *verified = [profileDict objectForKey:@\"verified_email\"];\n+        [auth setUserEmailIsVerified:[verified stringValue]];\n+      }\n     }\n   }\n   [self invokeFinalCallbackWithError:error];\n }\n+#endif // !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n \n // convenience method for making the final call to our delegate\n - (void)invokeFinalCallbackWithError:(NSError *)error {\n@@ -656,6 +715,7 @@ static void ReachabilityCallBack(SCNetworkReachabilityRef target,\n \n #pragma mark Token Revocation\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth {\n   if (auth.canAuthorize\n       && [auth.serviceProvider isEqual:kGTMOAuth2ServiceProviderGoogle]) {\n@@ -703,8 +763,9 @@ static void ReachabilityCallBack(SCNetworkReachabilityRef target,\n \n   [auth reset];\n }\n+#endif // !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n \n @end\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n ",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/GTMOAuth2SignIn.m"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/all-wcprops",
      "changes": 6,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 3,
      "filename": "GBox/Source/OAuth2/Mac/.svn/all-wcprops",
      "deletions": 3,
      "patch": "--- a/GBox/Source/OAuth2/Mac/.svn/all-wcprops\n+++ b/GBox/Source/OAuth2/Mac/.svn/all-wcprops\n@@ -1,13 +1,13 @@\n K 25\n svn:wc:ra_dav:version-url\n V 33\n-/svn/!svn/ver/35/trunk/Source/Mac\n+/svn/!svn/ver/56/trunk/Source/Mac\n END\n GTMOAuth2WindowController.m\n K 25\n svn:wc:ra_dav:version-url\n V 61\n-/svn/!svn/ver/35/trunk/Source/Mac/GTMOAuth2WindowController.m\n+/svn/!svn/ver/56/trunk/Source/Mac/GTMOAuth2WindowController.m\n END\n GTMOAuth2Window.xib\n K 25\n@@ -25,5 +25,5 @@ GTMOAuth2WindowController.h\n K 25\n svn:wc:ra_dav:version-url\n V 61\n-/svn/!svn/ver/35/trunk/Source/Mac/GTMOAuth2WindowController.h\n+/svn/!svn/ver/56/trunk/Source/Mac/GTMOAuth2WindowController.h\n END",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/all-wcprops"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/entries",
      "changes": 30,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 15,
      "filename": "GBox/Source/OAuth2/Mac/.svn/entries",
      "deletions": 15,
      "patch": "--- a/GBox/Source/OAuth2/Mac/.svn/entries\n+++ b/GBox/Source/OAuth2/Mac/.svn/entries\n@@ -1,14 +1,14 @@\n 10\n \n dir\n-40\n+56\n http://gtm-oauth2.googlecode.com/svn/trunk/Source/Mac\n http://gtm-oauth2.googlecode.com/svn\n \n \n \n-2011-06-03T17:50:27.997507Z\n-35\n+2011-08-26T20:06:19.917229Z\n+56\n grobbins@google.com\n \n \n@@ -32,10 +32,10 @@ file\n \n \n \n-2011-07-04T09:38:26.000000Z\n-ba7eff24a077ab886649eeaa5d576102\n-2011-06-03T17:50:27.997507Z\n-35\n+2011-08-31T03:08:15.000000Z\n+8d8d8fc88da0456d6ce71e33442dae3c\n+2011-08-26T20:06:19.917229Z\n+56\n grobbins@google.com\n \n \n@@ -58,7 +58,7 @@ grobbins@google.com\n \n \n \n-23778\n+25105\n \f\n GTMOAuth2Window.xib\n file\n@@ -66,7 +66,7 @@ file\n \n \n \n-2011-07-04T09:38:26.000000Z\n+2011-08-31T03:08:15.000000Z\n aae34ea7f052e72014ad0a30d3b75566\n 2011-05-26T19:35:54.519002Z\n 33\n@@ -100,7 +100,7 @@ file\n \n \n \n-2011-07-04T09:38:26.000000Z\n+2011-08-31T03:08:15.000000Z\n 6e581f7c7598f726149c882605ac56b1\n 2011-03-24T19:15:36.047395Z\n 11\n@@ -134,10 +134,10 @@ file\n \n \n \n-2011-07-04T09:38:26.000000Z\n-b9344963812e8443850eaec23ba1bce9\n-2011-06-03T17:50:27.997507Z\n-35\n+2011-08-31T03:08:15.000000Z\n+7d3ac5c80fe8235c9612ded28ec34dd7\n+2011-08-26T20:06:19.917229Z\n+56\n grobbins@google.com\n \n \n@@ -160,5 +160,5 @@ grobbins@google.com\n \n \n \n-12062\n+12628\n \f",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/entries"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.h.svn-base",
      "changes": 36,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 26,
      "filename": "GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.h.svn-base",
      "deletions": 10,
      "patch": "--- a/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.h.svn-base\n+++ b/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.h.svn-base\n@@ -65,7 +65,7 @@\n // If the network connection is lost for more than 30 seconds while the sign-in\n // html is displayed, the notification kGTLOAuthNetworkLost will be sent.\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #include <Foundation/Foundation.h>\n \n@@ -113,8 +113,10 @@\n #elif !__LP64__\n   // placeholders: for 32-bit builds, keep the size of the object's ivar section\n   // the same with and without blocks\n+#ifndef __clang_analyzer__\n   id completionPlaceholder_;\n #endif\n+#endif\n \n   // flag allowing application to quit during display of sign-in sheet on 10.6\n   // and later\n@@ -212,29 +214,39 @@\n \n - (IBAction)closeWindow:(id)sender;\n \n-// Init method for authenticating to Google services\n+// Create a controller for authenticating to Google services\n //\n // scope is the requested scope of authorization\n //   (like \"http://www.google.com/m8/feeds\")\n //\n-// language is nil or the desired display language code (like \"es\")\n-//\n // keychainItemName is used for storing the token on the keychain,\n //   and is required for the \"remember for later\" checkbox to be shown;\n //   keychainItemName should be like \"My Application: Google Contacts\"\n //   (or set to nil if no persistent keychain storage is desired)\n //\n // resourceBundle may be nil if the window is in the main bundle's nib\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName  // may be nil\n+           resourceBundle:(NSBundle *)bundle;           // may be nil\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n-   keychainItemName:(NSString *)keychainItemName  // may be nil\n-     resourceBundle:(NSBundle *)bundle;           // may be nil\n+   keychainItemName:(NSString *)keychainItemName\n+     resourceBundle:(NSBundle *)bundle;\n+#endif\n \n-// Init method for authenticating to non-Google services, taking\n+// Create a controller for authenticating to non-Google services, taking\n //   explicit endpoint URLs and an authentication object\n-//\n-// this is the designated initializer\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName  // may be nil\n+                    resourceBundle:(NSBundle *)bundle;           // may be nil\n+\n+// This is the designated initializer\n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n             keychainItemName:(NSString *)keychainItemName\n@@ -276,7 +288,9 @@\n + (NSString *)authNibName;\n \n // Revocation of an authorized token from Google\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth;\n+#endif\n \n // Keychain\n //\n@@ -287,9 +301,11 @@\n // Create an authentication object for Google services from the access\n // token and secret stored in the keychain; if no token is available, return\n // an unauthorized auth object\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)authForGoogleFromKeychainForName:(NSString *)keychainItemName\n                                                      clientID:(NSString *)clientID\n                                                  clientSecret:(NSString *)clientSecret;\n+#endif\n \n // Add tokens from the keychain, if available, to the authentication object\n //\n@@ -309,4 +325,4 @@\n \n #endif // #if !TARGET_OS_IPHONE\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.h.svn-base"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.m.svn-base",
      "changes": 81,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 59,
      "filename": "GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.m.svn-base",
      "deletions": 22,
      "patch": "--- a/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.m.svn-base\n+++ b/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.m.svn-base\n@@ -15,7 +15,7 @@\n \n #import <Foundation/Foundation.h>\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #if !TARGET_OS_IPHONE\n \n@@ -63,13 +63,25 @@ const char *kKeychainAccountName = \"OAuth\";\n             userData = userData_,\n             properties = properties_;\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+// Create a controller for authenticating to Google services\n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName\n+           resourceBundle:(NSBundle *)bundle {\n+  return [[[self alloc] initWithScope:scope\n+                             clientID:clientID\n+                         clientSecret:clientSecret\n+                     keychainItemName:keychainItemName\n+                       resourceBundle:bundle] autorelease];\n+}\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n    keychainItemName:(NSString *)keychainItemName\n      resourceBundle:(NSBundle *)bundle {\n-  // convenient entry point for Google authentication\n-\n   GTMOAuth2Authentication *auth;\n   auth = [GTMOAuth2SignIn standardGoogleAuthenticationForScope:scope\n                                                       clientID:clientID\n@@ -80,6 +92,18 @@ const char *kKeychainAccountName = \"OAuth\";\n                      keychainItemName:keychainItemName\n                        resourceBundle:bundle];\n }\n+#endif\n+\n+// Create a controller for authenticating to any service\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName\n+                    resourceBundle:(NSBundle *)bundle {\n+ return [[[self alloc] initWithAuthentication:auth\n+                             authorizationURL:authorizationURL\n+                             keychainItemName:keychainItemName\n+                               resourceBundle:bundle] autorelease];\n+}\n \n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n@@ -96,33 +120,33 @@ const char *kKeychainAccountName = \"OAuth\";\n                                 owner:self];\n   if (self != nil) {\n     // use the supplied auth and OAuth endpoint URLs\n-    self.signIn =  [[[GTMOAuth2SignIn alloc] initWithAuthentication:auth\n-                                                   authorizationURL:authorizationURL\n-                                                           delegate:self\n-                                                 webRequestSelector:@selector(signIn:displayRequest:)\n-                                                   finishedSelector:@selector(signIn:finishedWithAuth:error:)] autorelease];\n-    \n-    self.keychainItemName = keychainItemName;\n+    signIn_ = [[GTMOAuth2SignIn alloc] initWithAuthentication:auth\n+                                             authorizationURL:authorizationURL\n+                                                     delegate:self\n+                                           webRequestSelector:@selector(signIn:displayRequest:)\n+                                             finishedSelector:@selector(signIn:finishedWithAuth:error:)];\n+    keychainItemName_ = [keychainItemName copy];\n \n     // create local, temporary storage for WebKit cookies\n-    self.cookieStorage = [[[GTMCookieStorage alloc] init] autorelease];\n+    cookieStorage_ = [[GTMCookieStorage alloc] init];\n   }\n   return self;\n }\n \n - (void)dealloc {\n-  self.keychainItemName = nil;\n-  self.initialHTMLString = nil;\n-  self.userData = nil;\n-  self.properties = nil;\n-  self.signIn = nil;\n-  self.cookieStorage = nil;\n-  self.initialRequest = nil;\n-\n+  [signIn_ release];\n+  [initialRequest_ release];\n+  [cookieStorage_ release];\n   [delegate_ release];\n #if NS_BLOCKS_AVAILABLE\n   [completionBlock_ release];\n #endif\n+  [sheetModalForWindow_ release];\n+  [keychainItemName_ release];\n+  [initialHTMLString_ release];\n+  [userData_ release];\n+  [properties_ release];\n+\n   [super dealloc];\n }\n \n@@ -167,6 +191,12 @@ const char *kKeychainAccountName = \"OAuth\";\n     hideKeychainCheckbox = YES;\n   }\n \n+#if DEBUG\n+  // Verify that Javascript is enabled\n+  BOOL hasJS = [[webView_ preferences] isJavaScriptEnabled];\n+  NSAssert(hasJS, @\"GTMOAuth2: Javascript is required\");\n+#endif\n+\n   [keychainCheckbox_ setHidden:hideKeychainCheckbox];\n }\n \n@@ -372,9 +402,11 @@ const char *kKeychainAccountName = \"OAuth\";\n \n #pragma mark Token Revocation\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth {\n   [GTMOAuth2SignIn revokeTokenForGoogleAuthentication:auth];\n }\n+#endif\n \n #pragma mark WebView methods\n \n@@ -411,7 +443,10 @@ const char *kKeychainAccountName = \"OAuth\";\n }\n \n - (void)windowWillClose:(NSNotification *)note {\n-  [self handlePrematureWindowClose];\n+  if (isWindowShown_) {\n+    [self handlePrematureWindowClose];\n+  }\n+  isWindowShown_ = NO;\n }\n \n - (void)webView:(WebView *)webView\n@@ -554,11 +589,12 @@ decisionListener:(id<WebPolicyDecisionListener>)listener {\n   }\n }\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)authForGoogleFromKeychainForName:(NSString *)keychainItemName\n                                                      clientID:(NSString *)clientID\n                                                  clientSecret:(NSString *)clientSecret {\n   NSURL *tokenURL = [GTMOAuth2SignIn googleTokenURL];\n-  NSString *redirectURI = [GTMOAuth2SignIn googleRedirectURI];\n+  NSString *redirectURI = [GTMOAuth2SignIn nativeClientRedirectURI];\n \n   GTMOAuth2Authentication *auth;\n   auth = [GTMOAuth2Authentication authenticationWithServiceProvider:kGTMOAuth2ServiceProviderGoogle\n@@ -571,6 +607,7 @@ decisionListener:(id<WebPolicyDecisionListener>)listener {\n                                            authentication:auth];\n   return auth;\n }\n+#endif\n \n + (BOOL)authorizeFromKeychainForName:(NSString *)keychainItemName\n                       authentication:(GTMOAuth2Authentication *)newAuth {\n@@ -663,4 +700,4 @@ decisionListener:(id<WebPolicyDecisionListener>)listener {\n \n #endif // #if !TARGET_OS_IPHONE\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/.svn/text-base/GTMOAuth2WindowController.m.svn-base"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.h",
      "changes": 36,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 26,
      "filename": "GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.h",
      "deletions": 10,
      "patch": "--- a/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.h\n+++ b/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.h\n@@ -65,7 +65,7 @@\n // If the network connection is lost for more than 30 seconds while the sign-in\n // html is displayed, the notification kGTLOAuthNetworkLost will be sent.\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #include <Foundation/Foundation.h>\n \n@@ -113,8 +113,10 @@\n #elif !__LP64__\n   // placeholders: for 32-bit builds, keep the size of the object's ivar section\n   // the same with and without blocks\n+#ifndef __clang_analyzer__\n   id completionPlaceholder_;\n #endif\n+#endif\n \n   // flag allowing application to quit during display of sign-in sheet on 10.6\n   // and later\n@@ -212,29 +214,39 @@\n \n - (IBAction)closeWindow:(id)sender;\n \n-// Init method for authenticating to Google services\n+// Create a controller for authenticating to Google services\n //\n // scope is the requested scope of authorization\n //   (like \"http://www.google.com/m8/feeds\")\n //\n-// language is nil or the desired display language code (like \"es\")\n-//\n // keychainItemName is used for storing the token on the keychain,\n //   and is required for the \"remember for later\" checkbox to be shown;\n //   keychainItemName should be like \"My Application: Google Contacts\"\n //   (or set to nil if no persistent keychain storage is desired)\n //\n // resourceBundle may be nil if the window is in the main bundle's nib\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName  // may be nil\n+           resourceBundle:(NSBundle *)bundle;           // may be nil\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n-   keychainItemName:(NSString *)keychainItemName  // may be nil\n-     resourceBundle:(NSBundle *)bundle;           // may be nil\n+   keychainItemName:(NSString *)keychainItemName\n+     resourceBundle:(NSBundle *)bundle;\n+#endif\n \n-// Init method for authenticating to non-Google services, taking\n+// Create a controller for authenticating to non-Google services, taking\n //   explicit endpoint URLs and an authentication object\n-//\n-// this is the designated initializer\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName  // may be nil\n+                    resourceBundle:(NSBundle *)bundle;           // may be nil\n+\n+// This is the designated initializer\n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n             keychainItemName:(NSString *)keychainItemName\n@@ -276,7 +288,9 @@\n + (NSString *)authNibName;\n \n // Revocation of an authorized token from Google\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth;\n+#endif\n \n // Keychain\n //\n@@ -287,9 +301,11 @@\n // Create an authentication object for Google services from the access\n // token and secret stored in the keychain; if no token is available, return\n // an unauthorized auth object\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)authForGoogleFromKeychainForName:(NSString *)keychainItemName\n                                                      clientID:(NSString *)clientID\n                                                  clientSecret:(NSString *)clientSecret;\n+#endif\n \n // Add tokens from the keychain, if available, to the authentication object\n //\n@@ -309,4 +325,4 @@\n \n #endif // #if !TARGET_OS_IPHONE\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.h"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.m",
      "changes": 85,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 60,
      "filename": "GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.m",
      "deletions": 25,
      "patch": "--- a/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.m\n+++ b/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.m\n@@ -15,7 +15,7 @@\n \n #import <Foundation/Foundation.h>\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #if !TARGET_OS_IPHONE\n \n@@ -63,13 +63,25 @@ const char *kKeychainAccountName = \"OAuth\";\n             userData = userData_,\n             properties = properties_;\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+// Create a controller for authenticating to Google services\n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName\n+           resourceBundle:(NSBundle *)bundle {\n+  return [[[self alloc] initWithScope:scope\n+                             clientID:clientID\n+                         clientSecret:clientSecret\n+                     keychainItemName:keychainItemName\n+                       resourceBundle:bundle] autorelease];\n+}\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n    keychainItemName:(NSString *)keychainItemName\n      resourceBundle:(NSBundle *)bundle {\n-  // convenient entry point for Google authentication\n-\n   GTMOAuth2Authentication *auth;\n   auth = [GTMOAuth2SignIn standardGoogleAuthenticationForScope:scope\n                                                       clientID:clientID\n@@ -80,6 +92,18 @@ const char *kKeychainAccountName = \"OAuth\";\n                      keychainItemName:keychainItemName\n                        resourceBundle:bundle];\n }\n+#endif\n+\n+// Create a controller for authenticating to any service\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName\n+                    resourceBundle:(NSBundle *)bundle {\n+ return [[[self alloc] initWithAuthentication:auth\n+                             authorizationURL:authorizationURL\n+                             keychainItemName:keychainItemName\n+                               resourceBundle:bundle] autorelease];\n+}\n \n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n@@ -96,33 +120,33 @@ const char *kKeychainAccountName = \"OAuth\";\n                                 owner:self];\n   if (self != nil) {\n     // use the supplied auth and OAuth endpoint URLs\n-    self.signIn =  [[[GTMOAuth2SignIn alloc] initWithAuthentication:auth\n-                                                   authorizationURL:authorizationURL\n-                                                           delegate:self\n-                                                 webRequestSelector:@selector(signIn:displayRequest:)\n-                                                   finishedSelector:@selector(signIn:finishedWithAuth:error:)] autorelease];\n-    \n-    self.keychainItemName = keychainItemName;\n+    signIn_ = [[GTMOAuth2SignIn alloc] initWithAuthentication:auth\n+                                             authorizationURL:authorizationURL\n+                                                     delegate:self\n+                                           webRequestSelector:@selector(signIn:displayRequest:)\n+                                             finishedSelector:@selector(signIn:finishedWithAuth:error:)];\n+    keychainItemName_ = [keychainItemName copy];\n \n     // create local, temporary storage for WebKit cookies\n-    self.cookieStorage = [[[GTMCookieStorage alloc] init] autorelease];\n+    cookieStorage_ = [[GTMCookieStorage alloc] init];\n   }\n   return self;\n }\n \n - (void)dealloc {\n-  self.keychainItemName = nil;\n-  self.initialHTMLString = nil;\n-  self.userData = nil;\n-  self.properties = nil;\n-  self.signIn = nil;\n-  self.cookieStorage = nil;\n-  self.initialRequest = nil;\n-\n+  [signIn_ release];\n+  [initialRequest_ release];\n+  [cookieStorage_ release];\n   [delegate_ release];\n #if NS_BLOCKS_AVAILABLE\n   [completionBlock_ release];\n #endif\n+  [sheetModalForWindow_ release];\n+  [keychainItemName_ release];\n+  [initialHTMLString_ release];\n+  [userData_ release];\n+  [properties_ release];\n+\n   [super dealloc];\n }\n \n@@ -167,6 +191,12 @@ const char *kKeychainAccountName = \"OAuth\";\n     hideKeychainCheckbox = YES;\n   }\n \n+#if DEBUG\n+  // Verify that Javascript is enabled\n+  BOOL hasJS = [[webView_ preferences] isJavaScriptEnabled];\n+  NSAssert(hasJS, @\"GTMOAuth2: Javascript is required\");\n+#endif\n+\n   [keychainCheckbox_ setHidden:hideKeychainCheckbox];\n }\n \n@@ -372,9 +402,11 @@ const char *kKeychainAccountName = \"OAuth\";\n \n #pragma mark Token Revocation\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth {\n   [GTMOAuth2SignIn revokeTokenForGoogleAuthentication:auth];\n }\n+#endif\n \n #pragma mark WebView methods\n \n@@ -411,7 +443,10 @@ const char *kKeychainAccountName = \"OAuth\";\n }\n \n - (void)windowWillClose:(NSNotification *)note {\n-  [self handlePrematureWindowClose];\n+  if (isWindowShown_) {\n+    [self handlePrematureWindowClose];\n+  }\n+  isWindowShown_ = NO;\n }\n \n - (void)webView:(WebView *)webView\n@@ -554,11 +589,12 @@ decisionListener:(id<WebPolicyDecisionListener>)listener {\n   }\n }\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)authForGoogleFromKeychainForName:(NSString *)keychainItemName\n                                                      clientID:(NSString *)clientID\n                                                  clientSecret:(NSString *)clientSecret {\n   NSURL *tokenURL = [GTMOAuth2SignIn googleTokenURL];\n-  NSString *redirectURI = [GTMOAuth2SignIn googleRedirectURI];\n+  NSString *redirectURI = [GTMOAuth2SignIn nativeClientRedirectURI];\n \n   GTMOAuth2Authentication *auth;\n   auth = [GTMOAuth2Authentication authenticationWithServiceProvider:kGTMOAuth2ServiceProviderGoogle\n@@ -571,6 +607,7 @@ decisionListener:(id<WebPolicyDecisionListener>)listener {\n                                            authentication:auth];\n   return auth;\n }\n+#endif\n \n + (BOOL)authorizeFromKeychainForName:(NSString *)keychainItemName\n                       authentication:(GTMOAuth2Authentication *)newAuth {\n@@ -579,15 +616,13 @@ decisionListener:(id<WebPolicyDecisionListener>)listener {\n   // before accessing the keychain, check preferences to verify that we've\n   // previously saved a token to the keychain (so we don't needlessly raise\n   // a keychain access permission dialog)\n-  \n-  /*That issues a problem . The test never passed, so keychain never accessed.\n   NSString *prefKey = [self prefsKeyForName:keychainItemName];\n   NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n   BOOL flag = [defaults boolForKey:prefKey];\n   if (!flag) {\n     return NO;\n   }\n-  */\n+\n   BOOL didGetTokens = NO;\n \n   SecKeychainRef defaultKeychain = NULL;\n@@ -665,4 +700,4 @@ decisionListener:(id<WebPolicyDecisionListener>)listener {\n \n #endif // #if !TARGET_OS_IPHONE\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Mac/GTMOAuth2WindowController.m"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/ReleaseNotes.txt",
      "changes": 29,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 29,
      "filename": "GBox/Source/OAuth2/ReleaseNotes.txt",
      "deletions": 0,
      "patch": "--- a/GBox/Source/OAuth2/ReleaseNotes.txt\n+++ b/GBox/Source/OAuth2/ReleaseNotes.txt\n@@ -4,6 +4,35 @@ Project site:     http://code.google.com/p/gtm-oauth2/\n Discussion group: http://groups.google.com/group/gtm-oauth2\n \n \n+25-August-2011\n+\n+Added convenience methods for creating autoreleased controllers.\n+\n+\n+24-August-2011\n+\n+Fixed sign-in when Mac window controller displays as a standalone\n+modal window (thanks mirko)\n+\n+\n+2-August-2011\n+\n+Projects may now define GTM_OAUTH2_SKIP_GOOGLE_SUPPORT to exclude\n+Google-specific code. The GTMOAuth2 project file also now includes\n+\"non-Google\" targets for building without Google-specific code.\n+\n+\n+18-July-2011\n+\n+The authorization header now uses the \"Bearer\" prefix.\n+\n+\n+12-July-2011\n+\n+Added an additionalAuthorizationParameters property to the SignIn class, used\n+by the sample apps to specify a display language for the sign-in pages.\n+\n+\n 20-June-2011\n \n To avoid accidental leakage of tokens, the authentication object now",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/ReleaseNotes.txt"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/all-wcprops",
      "changes": 6,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 3,
      "filename": "GBox/Source/OAuth2/Touch/.svn/all-wcprops",
      "deletions": 3,
      "patch": "--- a/GBox/Source/OAuth2/Touch/.svn/all-wcprops\n+++ b/GBox/Source/OAuth2/Touch/.svn/all-wcprops\n@@ -1,19 +1,19 @@\n K 25\n svn:wc:ra_dav:version-url\n V 35\n-/svn/!svn/ver/35/trunk/Source/Touch\n+/svn/!svn/ver/56/trunk/Source/Touch\n END\n GTMOAuth2ViewControllerTouch.h\n K 25\n svn:wc:ra_dav:version-url\n V 66\n-/svn/!svn/ver/35/trunk/Source/Touch/GTMOAuth2ViewControllerTouch.h\n+/svn/!svn/ver/56/trunk/Source/Touch/GTMOAuth2ViewControllerTouch.h\n END\n GTMOAuth2ViewControllerTouch.m\n K 25\n svn:wc:ra_dav:version-url\n V 66\n-/svn/!svn/ver/35/trunk/Source/Touch/GTMOAuth2ViewControllerTouch.m\n+/svn/!svn/ver/56/trunk/Source/Touch/GTMOAuth2ViewControllerTouch.m\n END\n GTMOAuth2ViewTouch.xib\n K 25",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/all-wcprops"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/entries",
      "changes": 28,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 14,
      "filename": "GBox/Source/OAuth2/Touch/.svn/entries",
      "deletions": 14,
      "patch": "--- a/GBox/Source/OAuth2/Touch/.svn/entries\n+++ b/GBox/Source/OAuth2/Touch/.svn/entries\n@@ -1,14 +1,14 @@\n 10\n \n dir\n-40\n+56\n http://gtm-oauth2.googlecode.com/svn/trunk/Source/Touch\n http://gtm-oauth2.googlecode.com/svn\n \n \n \n-2011-06-03T17:50:27.997507Z\n-35\n+2011-08-26T20:06:19.917229Z\n+56\n grobbins@google.com\n \n \n@@ -32,10 +32,10 @@ file\n \n \n \n-2011-07-04T09:38:26.000000Z\n-5aaea2d143f79e1aaceb53bfcd18695e\n-2011-06-03T17:50:27.997507Z\n-35\n+2011-08-31T03:08:15.000000Z\n+fd6f6e5ab2dbcfee0f8b55efce957dab\n+2011-08-26T20:06:19.917229Z\n+56\n grobbins@google.com\n \n \n@@ -58,7 +58,7 @@ grobbins@google.com\n \n \n \n-10387\n+11689\n \f\n GTMOAuth2ViewControllerTouch.m\n file\n@@ -66,10 +66,10 @@ file\n \n \n \n-2011-07-04T09:38:26.000000Z\n-bf1010f0afbfbe6919261e1eab4b5092\n-2011-06-03T17:50:27.997507Z\n-35\n+2011-08-31T03:08:15.000000Z\n+b7e0396bfc58054adccf130873ad042f\n+2011-08-26T20:06:19.917229Z\n+56\n grobbins@google.com\n \n \n@@ -92,7 +92,7 @@ grobbins@google.com\n \n \n \n-27130\n+29894\n \f\n GTMOAuth2ViewTouch.xib\n file\n@@ -100,7 +100,7 @@ file\n \n \n \n-2011-07-04T09:38:26.000000Z\n+2011-08-31T03:08:15.000000Z\n c8e062332660528c054b23f6f6c1cb8a\n 2011-05-26T19:35:54.519002Z\n 33",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/entries"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.h.svn-base",
      "changes": 47,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 37,
      "filename": "GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.h.svn-base",
      "deletions": 10,
      "patch": "--- a/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.h.svn-base\n+++ b/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.h.svn-base\n@@ -23,7 +23,7 @@\n // every time the user will sign in.\n //\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #import <Foundation/Foundation.h>\n \n@@ -153,13 +153,11 @@ _EXTERN NSString* const kGTMOAuth2KeychainErrorDomain       _INITIALIZE_AS(@\"com\n \n @property (nonatomic, retain) NSDictionary *properties;\n \n-// init method for authenticating to Google services\n+// Method for creating a controller to authenticate to Google services\n //\n // scope is the requested scope of authorization\n //   (like \"http://www.google.com/m8/feeds\")\n //\n-// language is nil or the desired display language code (like \"es\")\n-//\n // keychain item name is used for storing the token on the keychain,\n //   keychainItemName should be like \"My Application: Google Latitude\"\n //   (or set to nil if no persistent keychain storage is desired)\n@@ -177,6 +175,14 @@ _EXTERN NSString* const kGTMOAuth2KeychainErrorDomain       _INITIALIZE_AS(@\"com\n //       finishedWithAuth:(GTMOAuth2Authentication *)auth\n //                  error:(NSError *)error;\n //\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName\n+                 delegate:(id)delegate\n+         finishedSelector:(SEL)finishedSelector;\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n@@ -185,17 +191,29 @@ _EXTERN NSString* const kGTMOAuth2KeychainErrorDomain       _INITIALIZE_AS(@\"com\n    finishedSelector:(SEL)finishedSelector;\n \n #if NS_BLOCKS_AVAILABLE\n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName\n+        completionHandler:(void (^)(GTMOAuth2ViewControllerTouch *viewController, GTMOAuth2Authentication *auth, NSError *error))handler;\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n    keychainItemName:(NSString *)keychainItemName\n   completionHandler:(void (^)(GTMOAuth2ViewControllerTouch *viewController, GTMOAuth2Authentication *auth, NSError *error))handler;\n #endif\n+#endif\n \n-// init method for authenticating to non-Google services, taking\n+// Create a controller for authenticating to non-Google services, taking\n //   explicit endpoint URLs and an authentication object\n-//\n-// this is the designated initializer\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName  // may be nil\n+                          delegate:(id)delegate\n+                  finishedSelector:(SEL)finishedSelector;\n+\n+// This is the designated initializer\n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n             keychainItemName:(NSString *)keychainItemName\n@@ -203,6 +221,11 @@ _EXTERN NSString* const kGTMOAuth2KeychainErrorDomain       _INITIALIZE_AS(@\"com\n             finishedSelector:(SEL)finishedSelector;\n \n #if NS_BLOCKS_AVAILABLE\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName  // may be nil\n+                 completionHandler:(void (^)(GTMOAuth2ViewControllerTouch *viewController, GTMOAuth2Authentication *auth, NSError *error))handler;\n+\n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n             keychainItemName:(NSString *)keychainItemName\n@@ -219,7 +242,9 @@ _EXTERN NSString* const kGTMOAuth2KeychainErrorDomain       _INITIALIZE_AS(@\"com\n - (void)cancelSigningIn;\n \n // revocation of an authorized token from Google\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth;\n+#endif\n \n //\n // Keychain\n@@ -228,9 +253,11 @@ _EXTERN NSString* const kGTMOAuth2KeychainErrorDomain       _INITIALIZE_AS(@\"com\n // create an authentication object for Google services from the access\n // token and secret stored in the keychain; if no token is available, return\n // an unauthorized auth object\n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)authForGoogleFromKeychainForName:(NSString *)keychainItemName\n                                                      clientID:(NSString *)clientID\n                                                  clientSecret:(NSString *)clientSecret;\n+#endif\n \n // add tokens from the keychain, if available, to the authentication object\n //\n@@ -255,8 +282,8 @@ _EXTERN NSString* const kGTMOAuth2KeychainErrorDomain       _INITIALIZE_AS(@\"com\n // it too, to store passwords.\n \n enum {\n-  kGTMOAuth2KeychainErrorBadArguments = -1001,\n-  kGTMOAuth2KeychainErrorNoPassword = -1002\n+  kGTMOAuth2KeychainErrorBadArguments = -1301,\n+  kGTMOAuth2KeychainErrorNoPassword = -1302\n };\n \n \n@@ -287,4 +314,4 @@ enum {\n \n #endif // TARGET_OS_IPHONE\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.h.svn-base"
    },
    {
      "raw_url": "https://github.com/theplant/GBox/raw/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.m.svn-base",
      "changes": 90,
      "status": "modified",
      "sha": "ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247",
      "additions": 75,
      "filename": "GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.m.svn-base",
      "deletions": 15,
      "patch": "--- a/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.m.svn-base\n+++ b/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.m.svn-base\n@@ -20,7 +20,7 @@\n #import <Foundation/Foundation.h>\n #import <Security/Security.h>\n \n-#if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES\n \n #if TARGET_OS_IPHONE\n \n@@ -64,6 +64,21 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n             userData = userData_,\n             properties = properties_;\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName\n+                 delegate:(id)delegate\n+         finishedSelector:(SEL)finishedSelector {\n+  return [[[self alloc] initWithScope:scope\n+                             clientID:clientID\n+                         clientSecret:clientSecret\n+                     keychainItemName:keychainItemName\n+                             delegate:delegate\n+                     finishedSelector:finishedSelector] autorelease];\n+}\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n@@ -86,6 +101,18 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n \n #if NS_BLOCKS_AVAILABLE\n \n++ (id)controllerWithScope:(NSString *)scope\n+                 clientID:(NSString *)clientID\n+             clientSecret:(NSString *)clientSecret\n+         keychainItemName:(NSString *)keychainItemName\n+        completionHandler:(void (^)(GTMOAuth2ViewControllerTouch *viewController, GTMOAuth2Authentication *auth, NSError *error))handler {\n+  return [[[self alloc] initWithScope:scope\n+                             clientID:clientID\n+                         clientSecret:clientSecret\n+                     keychainItemName:keychainItemName\n+                    completionHandler:handler] autorelease];\n+}\n+\n - (id)initWithScope:(NSString *)scope\n            clientID:(NSString *)clientID\n        clientSecret:(NSString *)clientSecret\n@@ -109,7 +136,20 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n   return self;\n }\n \n-#endif\n+#endif // NS_BLOCKS_AVAILABLE\n+#endif // !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n+\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName\n+                          delegate:(id)delegate\n+                  finishedSelector:(SEL)finishedSelector {\n+  return [[[self alloc] initWithAuthentication:auth\n+                              authorizationURL:authorizationURL\n+                              keychainItemName:keychainItemName\n+                                      delegate:delegate\n+                              finishedSelector:finishedSelector] autorelease];  \n+}\n \n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n@@ -148,6 +188,16 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n }\n \n #if NS_BLOCKS_AVAILABLE\n++ (id)controllerWithAuthentication:(GTMOAuth2Authentication *)auth\n+                  authorizationURL:(NSURL *)authorizationURL\n+                  keychainItemName:(NSString *)keychainItemName\n+                 completionHandler:(void (^)(GTMOAuth2ViewControllerTouch *viewController, GTMOAuth2Authentication *auth, NSError *error))handler {\n+  return [[[self alloc] initWithAuthentication:auth\n+                              authorizationURL:authorizationURL\n+                              keychainItemName:keychainItemName\n+                             completionHandler:handler] autorelease];\n+}\n+\n - (id)initWithAuthentication:(GTMOAuth2Authentication *)auth\n             authorizationURL:(NSURL *)authorizationURL\n             keychainItemName:(NSString *)keychainItemName\n@@ -166,23 +216,22 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n #endif\n \n - (void)dealloc {\n-  self.keychainItemName = nil;\n-  self.initialHTMLString = nil;\n-  self.backButton = nil;\n-  self.forwardButton = nil;\n-  self.navButtonsView = nil;\n-  self.rightBarButtonItem = nil;\n-  self.webView = nil;\n-  self.browserCookiesURL = nil;\n-  self.userData = nil;\n-  self.properties = nil;\n-\n+  [backButton_ release];\n+  [forwardButton_ release];\n+  [navButtonsView_ release];\n+  [rightBarButtonItem_ release];\n+  [webView_ release];\n   [signIn_ release];\n   [request_ release];\n   [delegate_ release];\n #if NS_BLOCKS_AVAILABLE\n   [completionBlock_ release];\n #endif\n+  [keychainItemName_ release];\n+  [initialHTMLString_ release];\n+  [browserCookiesURL_ release];\n+  [userData_ release];\n+  [properties_ release];\n \n   [super dealloc];\n }\n@@ -192,11 +241,12 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n   return @\"GTMOAuth2ViewTouch\";\n }\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (GTMOAuth2Authentication *)authForGoogleFromKeychainForName:(NSString *)keychainItemName\n                                                      clientID:(NSString *)clientID\n                                                  clientSecret:(NSString *)clientSecret {\n   NSURL *tokenURL = [GTMOAuth2SignIn googleTokenURL];\n-  NSString *redirectURI = [GTMOAuth2SignIn googleRedirectURI];\n+  NSString *redirectURI = [GTMOAuth2SignIn nativeClientRedirectURI];\n   \n   GTMOAuth2Authentication *auth;\n   auth = [GTMOAuth2Authentication authenticationWithServiceProvider:kGTMOAuth2ServiceProviderGoogle\n@@ -208,6 +258,7 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n                               authentication:auth];\n   return auth;\n }\n+#endif\n \n + (BOOL)authorizeFromKeychainForName:(NSString *)keychainItemName\n                       authentication:(GTMOAuth2Authentication *)newAuth {\n@@ -315,9 +366,11 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n \n #pragma mark Token Revocation\n \n+#if !GTM_OAUTH2_SKIP_GOOGLE_SUPPORT\n + (void)revokeTokenForGoogleAuthentication:(GTMOAuth2Authentication *)auth {\n   [GTMOAuth2SignIn revokeTokenForGoogleAuthentication:auth];\n }\n+#endif\n \n #pragma mark Browser Cookies\n \n@@ -561,8 +614,15 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n   NSString *title = [webView stringByEvaluatingJavaScriptFromString:@\"document.title\"];\n   if ([title length] > 0) {\n     [signIn_ titleChanged:title];\n+  } else {\n+#if DEBUG\n+    // Verify that Javascript is enabled\n+    NSString *result = [webView stringByEvaluatingJavaScriptFromString:@\"1+1\"];\n+    NSAssert([result integerValue] == 2, @\"GTMOAuth2: Javascript is required\");\n+#endif\n   }\n \n+\n   [self updateUI];\n }\n \n@@ -778,4 +838,4 @@ finishedWithAuth:(GTMOAuth2Authentication *)auth\n \n #endif // TARGET_OS_IPHONE\n \n-#endif // #if GTM_INCLUDE_OAUTH2 || (!GTL_REQUIRE_SERVICE_INCLUDES && !GDATA_REQUIRE_SERVICE_INCLUDES)\n+#endif // #if GTM_INCLUDE_OAUTH2 || !GDATA_REQUIRE_SERVICE_INCLUDES",
      "blob_url": "https://github.com/theplant/GBox/blob/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247/GBox/Source/OAuth2/Touch/.svn/text-base/GTMOAuth2ViewControllerTouch.m.svn-base"
    }
  ],
  "stats": {
    "additions": 540,
    "deletions": 221,
    "total": 761
  },
  "committer": {
    "avatar_url": "https://secure.gravatar.com/avatar/38eb4e6b823b7e406e11de34be7fe61d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "login": "chenxiaoyi",
    "id": 877966,
    "url": "https://api.github.com/users/chenxiaoyi"
  },
  "url": "https://api.github.com/repos/theplant/GBox/commits/ab3fcd0229df05ad1bb4e5f0df9eab18cc34a247"
}
