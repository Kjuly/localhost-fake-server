{
  "files": [
    {
      "status": "modified",
      "additions": 20,
      "deletions": 19,
      "changes": 39,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBContacts.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBContacts.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBContacts.m",
      "patch": "--- a/GBox/GBContacts.m\n+++ b/GBox/GBContacts.m\n@@ -150,25 +150,26 @@ static GBContacts* sharedInstance = nil;\n }\n \n // contacts fetched callback\n-- (void)contactsFetchTicket:(GDataServiceTicket *)ticket\n-           finishedWithFeed:(GDataFeedContact *)feed\n-                      error:(NSError *)error {\n-    if(error==nil){\n-    [self setContactFeed:feed];\n-    [self setContactFetchError:error];\n-    [self setContactFetchTicket:nil];\n-    [self setEmailArray];\n-    NSLog(@\"Contacts fetch ticket succeed. Will post the notification.\");\n-        isAvailable=YES;\n-    NSNotificationCenter * nc = [NSNotificationCenter defaultCenter]; \n-    [nc postNotificationName:kGBContactsListFetchSucceed\n-                      object:self];\n-        \n-    }else{\n-        NSLog(@\"Contacts fetch error: %@\",error);\n-    }\n-\n-    //[self updateUI];\n+- (void)contactsFetchTicket: (GDataServiceTicket *) ticket\n+       finishedWithFeed: (GDataFeedContact *) feed\n+       error: (NSError *) error {\n+\tif (error == nil) {\n+\t\t[self setContactFeed: feed];\n+\t\t[self setContactFetchError: error];\n+\t\t[self setContactFetchTicket: nil];\n+\t\t[self setEmailArray];\n+\n+\t\tNSLog(@\"Contacts fetch succeed. posting notification %@.\", kGBContactsListFetchSucceed);\n+\n+\t\tisAvailable = YES;\n+        NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];\n+        [nc postNotificationName: kGBContactsListFetchSucceed object: self];\n+\t}\n+\telse {\n+\t\tNSLog(@\"Contacts fetch error: %@\", error);\n+\t}\n+\n+\t//[self updateUI];\n }\n \n #pragma mark Setters and Getters"
    },
    {
      "status": "modified",
      "additions": 65,
      "deletions": 69,
      "changes": 134,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBCrashReport.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBCrashReport.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBCrashReport.m",
      "patch": "--- a/GBox/GBCrashReport.m\n+++ b/GBox/GBCrashReport.m\n@@ -60,77 +60,73 @@\n }\n \n \n-- (BOOL)newCrashReportExists\n-{\n-    NSDate *lastCrashTime = [[NSUserDefaults standardUserDefaults] valueForKey:@\"GBoxLastCrashTime\"];\n-    \n-    NSArray *libraryDirectories = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask,FALSE);\n-    NSString *logFilePath = @\"Logs/CrashReporter/\";\n-    NSString *crashLogPath = [[[libraryDirectories objectAtIndex: 0 ] stringByAppendingPathComponent: logFilePath] stringByExpandingTildeInPath];\n-    \n-    NSString *newCrashReport = [self GBFindNewCrashReport:[self applicationName] crashLogsFolder:crashLogPath];\n-    \n-    NSLog(@\"=======================crash report %@\",newCrashReport);\n-    NSError **err;\n+- (BOOL)newCrashReportExists {\n+\tNSDate *lastCrashTime = [[NSUserDefaults standardUserDefaults] valueForKey: @\"GBoxLastCrashTime\"];\n \n-    \n-     if(newCrashReport != nil){\n-        NSDate *crashReportTime = [[[NSFileManager defaultManager] attributesOfItemAtPath:newCrashReport \n-                                                                                    error:err]  fileModificationDate];\n-    NSLog(@\"=======================crash time %@\",crashReportTime);\n-    NSLog(@\"=======================default time %@\",lastCrashTime);\n-    \n-    \n-    \n-        //compare crash time\n-        if (lastCrashTime && crashReportTime && \n-            ([crashReportTime compare: lastCrashTime] == NSOrderedDescending))\n-        {\n-            NSLog(@\"==================has new crash\");\n-            \n-            \n-            NSError * err;\n-            \n-            NSString * crashContents = [[NSString alloc]\n-                                        initWithContentsOfFile:newCrashReport\n-                                        encoding:NSUTF8StringEncoding\n-                                        error:&err];\n-            \n-            NSString *post = [NSString stringWithFormat:@\"entry.0.single=%@&pageNumber=0&backupCache=&submit=Submit\",crashContents];\n-            \n-            \n-            NSData *postData = [post dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];\n-            NSString *postLength = [NSString stringWithFormat:@\"%d\", [post length]];\n-            \n-            NSMutableURLRequest *request = [[[NSMutableURLRequest alloc] init] autorelease];\n-            [request setURL:[NSURL URLWithString:@\"https://docs.google.com/spreadsheet/formResponse?formkey=dFJyTzZMOGUwSnBEWktXYnl3SWpZRXc6MQ&amp;ifq\"]];\n-            [request setHTTPMethod:@\"POST\"];\n-            [request setValue:postLength forHTTPHeaderField:@\"Content-Length\"];\n-            [request setValue:@\"application/x-www-form-urlencoded\" forHTTPHeaderField:@\"Content-Type\"];\n-            [request setHTTPBody:postData];\n-            \n-            \n-            [NSURLConnection connectionWithRequest:request delegate:self];\n-            \n-            [crashContents release];\n-            \n-            \n-           //[[NSUserDefaults standardUserDefaults] setValue:crashReportTime forKey:@\"GBoxLastCrashTime\"];\n-            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n-            [defaults setValue:crashReportTime forKey:@\"GBoxLastCrashTime\"];\n-            [defaults synchronize];\n-        \n-            return YES;\n-        }else{\n-            NSLog(@\"==================has no crash\");\n-          \n-            return NO;\n-        }\n-        \n+\tNSArray *libraryDirectories = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, FALSE);\n+\tNSString *logFilePath = @\"Logs/CrashReporter/\";\n+\tNSString *crashLogPath = [[[libraryDirectories objectAtIndex: 0] stringByAppendingPathComponent: logFilePath] stringByExpandingTildeInPath];\n \n-    }\n-}\n-                                \n+\tNSString *newCrashReport = [self GBFindNewCrashReport: [self applicationName] crashLogsFolder: crashLogPath];\n+\n+\tNSLog(@\"Crash report %@\", newCrashReport);\n+\tNSError **err;\n+\n+\n+\tif (newCrashReport != nil) {\n+\t\tNSDate *crashReportTime = [[[NSFileManager defaultManager] attributesOfItemAtPath: newCrashReport\n+\t\t                            error: err]  fileModificationDate];\n+\t\tNSLog(@\"Crash time %@\", crashReportTime);\n+\t\tNSLog(@\"Default time %@\", lastCrashTime);\n+\n+\n+\n+\t\t//compare crash time\n+\t\tif ( lastCrashTime && crashReportTime &&\n+\t\t     ([crashReportTime compare: lastCrashTime] == NSOrderedDescending) ) {\n+\t\t\tNSLog(@\"New Crashed\");\n+\n+\n+\t\t\tNSError *err;\n+\n+\t\t\tNSString *crashContents = [[NSString alloc]\n+\t\t\t                           initWithContentsOfFile: newCrashReport\n+\t\t\t                           encoding: NSUTF8StringEncoding\n+\t\t\t                           error: &err];\n+\n+\t\t\tNSString *post = [NSString stringWithFormat: @\"entry.0.single=%@&pageNumber=0&backupCache=&submit=Submit\", crashContents];\n+\n+\n+\t\t\tNSData *postData = [post dataUsingEncoding: NSUTF8StringEncoding allowLossyConversion: YES];\n+\t\t\tNSString *postLength = [NSString stringWithFormat: @\"%d\", [post length]];\n+\n+\t\t\tNSMutableURLRequest *request = [[[NSMutableURLRequest alloc] init] autorelease];\n+\t\t\t[request setURL: [NSURL URLWithString: @\"https://docs.google.com/spreadsheet/formResponse?formkey=dFJyTzZMOGUwSnBEWktXYnl3SWpZRXc6MQ&amp;ifq\"]];\n+\t\t\t[request setHTTPMethod: @\"POST\"];\n+\t\t\t[request setValue: postLength forHTTPHeaderField: @\"Content-Length\"];\n+\t\t\t[request setValue: @\"application/x-www-form-urlencoded\" forHTTPHeaderField: @\"Content-Type\"];\n+\t\t\t[request setHTTPBody: postData];\n+\n+\n+\t\t\t[NSURLConnection connectionWithRequest: request delegate: self];\n+\n+\t\t\t[crashContents release];\n+\n+\n+\t\t\t//[[NSUserDefaults standardUserDefaults] setValue:crashReportTime forKey:@\"GBoxLastCrashTime\"];\n+\t\t\tNSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n+\t\t\t[defaults setValue: crashReportTime forKey: @\"GBoxLastCrashTime\"];\n+\t\t\t[defaults synchronize];\n+\n+\t\t\treturn YES;\n+\t\t}\n+\t\telse {\n+\t\t\tNSLog(@\"Haven't crash\");\n+\n+\t\t\treturn NO;\n+\t\t}\n+\t}\n+}                                \n \n - (NSString*) applicationName\n {"
    },
    {
      "status": "modified",
      "additions": 31,
      "deletions": 31,
      "changes": 62,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBDataFacility.h",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBDataFacility.h",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBDataFacility.h",
      "patch": "--- a/GBox/GBDataFacility.h\n+++ b/GBox/GBDataFacility.h\n@@ -12,52 +12,52 @@\n @class GBCollectionManager;\n \n @interface GBDataFacility : NSObject {\n-@private\n-    NSManagedObjectModel *model;\n-    NSPersistentStoreCoordinator *coordinator;\n-    NSManagedObjectContext *context;\n-    id persistentStore;\n-    \n-    NSURL * DB_storeURL;\n-    \n-    GBCollectionManager* collectionManager;\n-        \n+\t@private\n+\tNSManagedObjectModel *model;\n+\tNSPersistentStoreCoordinator *coordinator;\n+\tNSManagedObjectContext *context;\n+\tid persistentStore;\n+\n+\tNSURL *DB_storeURL;\n+\n+\tGBCollectionManager *collectionManager;\n }\n \n-+(GBDataFacility*)sharedDataFacility;\n++ (GBDataFacility *)sharedDataFacility;\n+\n+- (void)clearData;\n \n--(void)clearData;\n+- (BOOL) InitializeCoreDataStack: (NSError **) error;\n \n--(BOOL) InitializeCoreDataStack:(NSError **)error;\n+- (NSArray *)fetchTaskOfState: (NSInteger) state;\n \n--(NSArray*)fetchTaskOfState:(NSInteger)state;\n--(NSManagedObject*)fetchTaskOfTimestamp:(NSNumber*)timestamp;\n+- (NSManagedObject *)fetchTaskOfTimestamp: (NSNumber *) timestamp;\n \n--(NSManagedObject *)insertEvent:(NSNumber*)eventID\n-                  withEventCode:(NSInteger)eventCode\n-                       operandA:(NSString*)operandA\n-                    andOperandB:(NSString*)operandB;\n+- (NSManagedObject *)insertEvent: (NSNumber *) eventID\n+       withEventCode: (NSInteger) eventCode\n+       operandA: (NSString *) operandA\n+       andOperandB: (NSString *) operandB;\n \n //Without saving instantly\n--(void)             insertEvent:(NSNumber*)eventID\n-                  withEventCode:(NSInteger)eventCode\n-                       operandA:(NSString*)operandA\n-                       operandB:(NSString*)operandB\n-                       andState:(NSUInteger)state;\n+- (void) insertEvent: (NSNumber *) eventID\n+       withEventCode: (NSInteger) eventCode\n+       operandA: (NSString *) operandA\n+       operandB: (NSString *) operandB\n+       andState: (NSUInteger) state;\n \n //Helper Function:\n--(NSManagedObject*) moForMOID:(NSManagedObjectID*)moid;\n+- (NSManagedObject *) moForMOID: (NSManagedObjectID *) moid;\n \n--(void) setState:(NSInteger) state ofTaskID:(NSManagedObjectID*)moid;\n+- (void) setState: (NSInteger) state ofTaskID: (NSManagedObjectID *) moid;\n \n--(NSUInteger)countOfWaitingTasks;\n+- (NSUInteger)countOfWaitingTasks;\n \n--(NSUInteger)countOfExecutingTasks;\n+- (NSUInteger)countOfExecutingTasks;\n \n--(void)setUnfinshedTaskToWaiting;\n+- (void)setUnfinshedTaskToWaiting;\n \n--(void)setCollectionManager:(GBCollectionManager*)cm;\n+- (void)setCollectionManager: (GBCollectionManager *) cm;\n \n--(void)contextSave;\n+- (void)contextSave;\n \n @end"
    },
    {
      "status": "modified",
      "additions": 25,
      "deletions": 23,
      "changes": 48,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBDataFacility.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBDataFacility.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBDataFacility.m",
      "patch": "--- a/GBox/GBDataFacility.m\n+++ b/GBox/GBDataFacility.m\n@@ -254,31 +254,33 @@ static GBDataFacility* instance =nil;\n     \n }\n \n--(NSManagedObject*)fetchTaskOfTimestamp:(NSNumber*)timestamp{\n-    \n-    NSArray* taskEntries=nil;\n-    NSFetchRequest *fetchRequest = [model \n-                                            fetchRequestFromTemplateWithName:@\"fetchTaskByTimestamp\"\n-                                            substitutionVariables:\n-                                            [NSDictionary dictionaryWithObjectsAndKeys:timestamp,@\"eventID\", nil]];                \n-    NSError* error=nil;\n-    \n-    taskEntries = [context executeFetchRequest:fetchRequest error:&error];\n-    \n-    if ((error != nil) || (taskEntries == nil))\n-    {\n-        NSLog(@\"Error while fetching\\n%@\",\n-              ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n-        exit(1);\n-    }\n-    if([taskEntries count] ==0){\n-        return nil;\n-    }else{\n-        return [taskEntries objectAtIndex:0];\n-    }\n-    \n+- (NSManagedObject *)fetchTaskOfTimestamp: (NSNumber *) timestamp {\n+\tNSArray *taskEntries = nil;\n+\tNSFetchRequest *fetchRequest = [model\n+\t                                fetchRequestFromTemplateWithName: @\"fetchTaskByTimestamp\"\n+\t                                substitutionVariables:\n+\t                                [NSDictionary dictionaryWithObjectsAndKeys: timestamp, @\"eventID\", nil]];\n+\n+    // [fetchRequest setEntity:[NSEntityDescription entityForName:@\"GBTaskEntity\" inManagedObjectContext:context]];\n+\n+\tNSError *error = nil;\n+\n+\ttaskEntries = [context executeFetchRequest: fetchRequest error: &error];\n+\n+\tif ( (error != nil) || (taskEntries == nil) ) {\n+\t\tNSLog(@\"Error while fetching\\n%@\",\n+\t\t      ([error localizedDescription] != nil) ? [error localizedDescription] : @\"Unknown Error\");\n+\t\texit(1);\n+\t}\n+\tif ([taskEntries count] == 0) {\n+\t\treturn nil;\n+\t}\n+\telse {\n+\t\treturn [taskEntries objectAtIndex: 0];\n+\t}\n }\n \n+\n -(NSArray*)fetchTaskOfState:(NSInteger)state{\n     \n     NSArray* taskEntries=nil;"
    },
    {
      "status": "modified",
      "additions": 57,
      "deletions": 64,
      "changes": 121,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBDocListData.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBDocListData.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBDocListData.m",
      "patch": "--- a/GBox/GBDocListData.m\n+++ b/GBox/GBDocListData.m\n@@ -125,73 +125,66 @@ static GBDocListData* sharedInstance = nil;\n \n // begin retrieving the list of the user's docs\n - (void)fetchDocList {\n-    \n-    [self setDocListFeed:nil];\n-    [self setDocListFetchError:nil];\n-    [self setDocListFetchTicket:nil];\n-    \n-    GDataServiceGoogleDocs *service = [self docsService];\n-    GDataServiceTicket *ticket;\n-    \n-    // Fetching a feed gives us 25 responses by default.  We need to use\n-    // the feed's \"next\" link to get any more responses.  If we want more than 25\n-    // at a time, instead of calling fetchDocsFeedWithURL, we can create a\n-    // GDataQueryDocs object, as shown here.\n-    \n-    NSURL *feedURL = [GDataServiceGoogleDocs docsFeedURL];\n-    \n-    GDataQueryDocs *query = [GDataQueryDocs documentQueryWithFeedURL:feedURL];\n-    [query setMaxResults:10000];\n-    [query setShouldShowFolders:YES];\n-    \n-    ticket = [service fetchFeedWithQuery:query\n-                       completionHandler:^(GDataServiceTicket *ticket, GDataFeedBase *feed, NSError *error) {\n-                           // callback\n-                           [self setDocListFeed:(GDataFeedDocList *)feed];\n-                           [self setDocListFetchError:error];\n-                           [self setDocListFetchTicket:nil];\n-                           if(error==nil){\n-                               //Deal with the doc list \n-                               //Fetch List test.\n-                               \n-                               //[self printEntryList];\n-                               \n-                               //        NSLog(@\"===============Server MD5 List==================\");\n-                               \n-                               //[self fetchServerDic];\n-                               \n-                               /*\n-                                for(NSString* entry in [[self serverDic] allKeys] ){\n-                                NSLog(\"MD5 entry in serverDic: %@ \",entry);\n-                                }\n-                                */\n-                               \n-                               //NSArray * serverMD5List = [[self serverDic] allKeys];\n-                               \n-                               \n-                               \n-                               //[self setSeverMD5Set:serverMD5List];\n-                               \n-                               NSNotificationCenter * nc = [NSNotificationCenter defaultCenter]; \n-                               [nc postNotificationName:kGBDocListFetchSucceed\n-                                                 object:self];\n-                               \n-                           }else{\n-                               NSLog(@\"List fetch not succeed. Please check the network.\\\n+\t[self setDocListFeed: nil];\n+\t[self setDocListFetchError: nil];\n+\t[self setDocListFetchTicket: nil];\n+\n+\tGDataServiceGoogleDocs *service = [self docsService];\n+\tGDataServiceTicket *ticket;\n+\n+\t// Fetching a feed gives us 25 responses by default.  We need to use\n+\t// the feed's \"next\" link to get any more responses.  If we want more than 25\n+\t// at a time, instead of calling fetchDocsFeedWithURL, we can create a\n+\t// GDataQueryDocs object, as shown here.\n+\n+\tNSURL *feedURL = [GDataServiceGoogleDocs docsFeedURL];\n+\n+\tGDataQueryDocs *query = [GDataQueryDocs documentQueryWithFeedURL: feedURL];\n+\t[query setMaxResults: 10000];\n+\t[query setShouldShowFolders: YES];\n+\n+\tticket = [service fetchFeedWithQuery: query\n+\t          completionHandler:^(GDataServiceTicket * ticket, GDataFeedBase * feed, NSError * error) {\n+\t                  // callback\n+\t                  [self setDocListFeed: (GDataFeedDocList *)feed];\n+\t                  [self setDocListFetchError: error];\n+\t                  [self setDocListFetchTicket: nil];\n+\t                  if (error == nil) {\n+\t                          //Deal with the doc list\n+\t                          //Fetch List test.\n+\n+\t                          //[self printEntryList];\n+\n+\t                          //        NSLog(@\"===============Server MD5 List==================\");\n+\n+\t                          //[self fetchServerDic];\n+\n+\t                          /*\n+\t                             for(NSString* entry in [[self serverDic] allKeys] ){\n+\t                             NSLog(\"MD5 entry in serverDic: %@ \",entry);\n+\t                             }\n+\t                           */\n+\n+\t                          //NSArray * serverMD5List = [[self serverDic] allKeys];\n+\n+\n+\n+\t                          //[self setSeverMD5Set:serverMD5List];\n+\n+\t                          NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];\n+\t                          [nc postNotificationName: kGBDocListFetchSucceed object: self];\n+                      }\n+\t                  else {\n+\t                          NSLog (@\"List fetch not succeed. Please check your network.\\\n                                      Please take care the proxy and ssh. Thanks to the GFW.\");\n-                               \n-                           }\n+                      }\n+              }];\n \n-                           \n-                       }];\n-    \n-    [self setDocListFetchTicket:ticket];\n-    \n-    // update our metadata entry for this user\n-    [self fetchMetadataEntry];\n-    \n-}\n+\t[self setDocListFetchTicket: ticket];\n \n+\t// update our metadata entry for this user\n+\t[self fetchMetadataEntry];\n+}\n \n \n /*"
    },
    {
      "status": "modified",
      "additions": 99,
      "deletions": 95,
      "changes": 194,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBSyncController.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBSyncController.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBSyncController.m",
      "patch": "--- a/GBox/GBSyncController.m\n+++ b/GBox/GBSyncController.m\n@@ -57,7 +57,7 @@\n         //Manage the Concurrent Operation Number limit\n         NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];\n         [nc addObserver:self\n-               selector:@selector(docListFetchSucceed)\n+               selector:@selector(docListFetchSucceed:)\n                    name:kGBDocListFetchSucceed\n                  object:nil];\n         [nc addObserver:self\n@@ -206,9 +206,9 @@ static GBSyncController * shareSyncController = nil;\n     firstDocListFetchSucceed = yesORno;\n }\n \n--(void) docListFetchSucceed{\n+-(void) docListFetchSucceed: (NSNotification*) aNotification{\n     \n-    NSLog(@\"fetch list succeed.\");\n+    NSLog(@\"Fetch Google Doc list succeed: %@\", aNotification);\n     \n     if (setupFinished) {\n         if(firstDocListFetchSucceed){\n@@ -228,7 +228,7 @@ static GBSyncController * shareSyncController = nil;\n \n -(void)initialDocChangeFeedFetchSucceed:(NSNotification*) aNotification{\n     NSNumber* largestChangestamp = [aNotification object];\n-    NSLog(@\"Initial fetch<Largest changestamp>: %@\",largestChangestamp);\n+    NSLog(@\"Initial Fetch Largest change stamp: %@\", largestChangestamp);\n     \n     [[NSUserDefaults standardUserDefaults] setObject:largestChangestamp\n                                               forKey:kGBLargestChangestamp];\n@@ -236,100 +236,104 @@ static GBSyncController * shareSyncController = nil;\n }\n \n \n--(void)docChangeFeedFetchSucceed:(NSNotification*) aNotification{\n-    NSDictionary *userInfo = [aNotification userInfo];\n-    NSSet *changesEntries = [NSSet setWithArray:[aNotification object]];\n-            \n-    if(changesEntries!=nil){\n-        \n-        BOOL anyChangesNew = NO;\n-        \n-        for (GDataEntryDocBase *entry in changesEntries) {\n-            \n-            NSNumber* entryChangestamp = [entry changestamp];\n-            \n-            if([dataFacility fetchTaskOfTimestamp:entryChangestamp]==nil){\n-                anyChangesNew =YES;\n-            }\n+- (void)docChangeFeedFetchSucceed: (NSNotification *) aNotification {\n+\tNSDictionary *userInfo = [aNotification userInfo];\n+\tNSSet *changesEntries = [NSSet setWithArray: [aNotification object]];\n+\n+    NSLog(@\"Change Feed Fetch succeed\");\n+\n+    if (changesEntries == nil) {\n+        NSLog(@\"\\t=> Change entries nil\");\n+        return;\n+    }\n+\n+    BOOL anyChangesNew = NO;\n+\n+    for (GDataEntryDocBase *entry in changesEntries) {\n+        NSNumber *entryChangestamp = [entry changestamp];\n+\n+        if ([dataFacility fetchTaskOfTimestamp: entryChangestamp] == nil) {\n+            anyChangesNew = YES;\n         }\n-        \n-        if(anyChangesNew){\n-            //largestChangestamp will not be updated, until the changeEntries is fetched successfully.\n-            NSNumber *largestChangestamp = [userInfo objectForKey:kGBLargestChangestamp] ;\n-            NSLog(@\"Largest changestamp: %@\",largestChangestamp);\n-            \n-            [[NSUserDefaults standardUserDefaults] setObject:largestChangestamp\n-                                                      forKey:kGBLargestChangestamp];\n-            [[NSUserDefaults standardUserDefaults] synchronize];\n-            \n-            //second or later fetch\n-            //Deal with each changed entry, treat it as common doc/collection entry\n-            for (GDataEntryDocBase *entry in changesEntries) {\n-                \n-                BOOL isCollection = ([entry class]==[GDataEntryFolderDoc class])?YES:NO;\n-                NSString* entryTitle = [[entry title] stringValue];\n-                NSNumber* entryChangestamp = [entry changestamp];\n-                NSString* entryIdentifier = [entry identifier];\n-                \n-                //Ignore file created on web.\n-                if((!isCollection)&&[entry MD5Checksum]==nil){\n-                    [dataFacility insertEvent:entryChangestamp\n-                                withEventCode:kGBServerNoMD5FileExist\n-                                     operandA:entryIdentifier\n-                                     operandB:nil\n-                                     andState:kGBStateCancel];\n-                    continue;\n-                }\n-                \n-                //Entry\n-                if([dataFacility fetchTaskOfTimestamp:entryChangestamp]==nil){\n-                    //Ensure This entry is processed only once. \n-                    \n-                    if ([entry isRemoved]) {\n-                        // Removed\n-                        //NSLog(@\"Removed %@ with timestamp %@\",[entry identifier] ,[entry changestamp]);\n-                    } else {\n-                        // Added or updated\n-                        //[GBUtility displayAlert:@\"Added Or Updated\" format:@\"\\n%@\", [[entry title] stringValue]];\n-                        NSLog(@\"Added or Updated %@ with timestamp %@\",entryTitle,entryChangestamp);\n-                        if([entry isDeleted]){\n-                            //Is trashed on server \n-                            \n-                            //Succeed into this step.\n-                            if(isCollection){\n-                                NSLog(@\"Collection %@ deleted on server.\",entryTitle);\n-                                [dataFacility insertEvent:entryChangestamp\n-                                            withEventCode:kGBServerDeleteCollection\n-                                                 operandA:entryIdentifier\n-                                              andOperandB:nil];\n-                                \n-                                \n-                            }else{\n-                                NSLog(@\"Doc entry %@ deleted on server.\",entryTitle);\n-                                [dataFacility insertEvent:entryChangestamp\n-                                            withEventCode:kGBServerDeleteFile\n-                                                 operandA:entryIdentifier\n-                                              andOperandB:nil];\n-                            }\n-                            \n-                        }else{\n-                            [dataFacility insertEvent:entryChangestamp\n-                                        withEventCode:kGBServerFileUpdated\n-                                             operandA:entryIdentifier\n-                                          andOperandB:nil];\n-                        }//If the entry is deleted.\n-                        \n-                    }//is Removed.\n-                    \n-                }//Ensure This entry is processed only once.   \n-                \n-            }//For each entry doc/collection\n-            [dataFacility contextSave];\n-        }//Any changes new\n-        \n-    }//changeEntries nil\n+    }\n+\n+    if (!anyChangesNew) {\n+        NSLog(@\"\\t=> No new change entries\");\n+        return;\n+    }\n+    \n     \n+    //largestChangestamp will not be updated, until the changeEntries is fetched successfully.\n+    NSNumber *largestChangestamp = [userInfo objectForKey: kGBLargestChangestamp];\n+    NSLog(@\"Largest changestamp: %@\", largestChangestamp);\n+\n+    [[NSUserDefaults standardUserDefaults] setObject: largestChangestamp\n+     forKey: kGBLargestChangestamp];\n+    [[NSUserDefaults standardUserDefaults] synchronize];\n+\n+    //second or later fetch\n+    //Deal with each changed entry, treat it as common doc/collection entry\n+    for (GDataEntryDocBase *entry in changesEntries) {\n+        BOOL isCollection = ([entry class] == [GDataEntryFolderDoc class]) ? YES : NO;\n+        NSString *entryTitle = [[entry title] stringValue];\n+        NSNumber *entryChangestamp = [entry changestamp];\n+        NSString *entryIdentifier = [entry identifier];\n+\n+        //Ignore file created on web.\n+        if ( (!isCollection) && [entry MD5Checksum] == nil ) {\n+            [dataFacility insertEvent: entryChangestamp\n+             withEventCode: kGBServerNoMD5FileExist\n+             operandA: entryIdentifier\n+             operandB: nil\n+             andState: kGBStateCancel];\n+            continue;\n+        }\n+\n+        //Entry\n+        if ([dataFacility fetchTaskOfTimestamp: entryChangestamp] == nil) {\n+            //Ensure This entry is processed only once.\n+\n+            if ([entry isRemoved]) {\n+                // Removed\n+                //NSLog(@\"Removed %@ with timestamp %@\",[entry identifier] ,[entry changestamp]);\n+            }\n+            else {\n+                // Added or updated\n+                //[GBUtility displayAlert:@\"Added Or Updated\" format:@\"\\n%@\", [[entry title] stringValue]];\n+                NSLog(@\"Added or Updated %@ with timestamp %@\", entryTitle, entryChangestamp);\n+                if ([entry isDeleted]) {\n+                    //Is trashed on server\n+\n+                    //Succeed into this step.\n+                    if (isCollection) {\n+                        NSLog(@\"Collection %@ deleted on server.\", entryTitle);\n+                        [dataFacility insertEvent: entryChangestamp\n+                         withEventCode: kGBServerDeleteCollection\n+                         operandA: entryIdentifier\n+                         andOperandB: nil];\n+                    }\n+                    else {\n+                        NSLog(@\"Doc entry %@ deleted on server.\", entryTitle);\n+                        [dataFacility insertEvent: entryChangestamp\n+                         withEventCode: kGBServerDeleteFile\n+                         operandA: entryIdentifier\n+                         andOperandB: nil];\n+                    }\n+                }\n+                else {\n+                    [dataFacility insertEvent: entryChangestamp\n+                     withEventCode: kGBServerFileUpdated\n+                     operandA: entryIdentifier\n+                     andOperandB: nil];\n+                } //If the entry is deleted.\n+            } //is Removed.\n+        } //Ensure This entry is processed only once.\n+    } //For each entry doc/collection\n+    [dataFacility contextSave];\n }\n+\n+\n+\n - (void) setBandWidth:(NSUInteger)bandwidth\n {\n     bandwidthLimit = bandwidth;"
    },
    {
      "status": "modified",
      "additions": 28,
      "deletions": 28,
      "changes": 56,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBUtility.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBUtility.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBUtility.m",
      "patch": "--- a/GBox/GBUtility.m\n+++ b/GBox/GBUtility.m\n@@ -270,34 +270,34 @@ static NSUInteger sharedBandWidth = 0;\n }\n \n \n-+(NSURL *)applicationLogDirectory{\n-    static const NSString *LOG_DIRECTORY = @\"GBox\";\n-    NSURL* ald = nil;\n-    \n-    NSFileManager *fileManager = [NSFileManager defaultManager];\n-    NSError *error = nil;\n-    NSURL *libraryURL = [fileManager URLForDirectory:NSLibraryDirectory inDomain:NSUserDomainMask\n-                                   appropriateForURL:nil create:YES error:&error];\n-    if (libraryURL == nil) {\n-        NSLog(@\"Could not access Library directory\\n%@\", [error localizedDescription]);\n-    }\n-    \n-    else {\n-        ald = [libraryURL URLByAppendingPathComponent:@\"Logs\"];\n-        ald = [ald URLByAppendingPathComponent:LOG_DIRECTORY];\n-        NSDictionary *properties = [ald resourceValuesForKeys:\n-                                    [NSArray arrayWithObject:NSURLIsDirectoryKey] error:&error];\n-        if (properties == nil) {\n-            if (![fileManager createDirectoryAtPath:[ald path]\n-                        withIntermediateDirectories:YES attributes:nil error:&error]) {\n-                NSLog(@\"Could not create directory %@\\n%@\",\n-                      [ald path], [error localizedDescription]);\n-                ald = nil;\n-            }\n-        }\n-    }\n-    \n-    return ald;\n++ (NSURL *)applicationLogDirectory {\n+\tstatic const NSString *LOG_DIRECTORY = @\"GBox\";\n+\tNSURL *ald = nil;\n+\n+\tNSFileManager *fileManager = [NSFileManager defaultManager];\n+\tNSError *error = nil;\n+\tNSURL *libraryURL = [fileManager URLForDirectory: NSLibraryDirectory inDomain: NSUserDomainMask\n+\t                     appropriateForURL: nil create: YES error: &error];\n+\tif (libraryURL == nil) {\n+\t\tNSLog(@\"Could not access Library directory\\n%@\", [error localizedDescription]);\n+\t}\n+\n+\telse {\n+\t\tald = [libraryURL URLByAppendingPathComponent: @\"Logs\"];\n+\t\tald = [ald URLByAppendingPathComponent: LOG_DIRECTORY];\n+\t\tNSDictionary *properties = [ald resourceValuesForKeys:\n+\t\t                            [NSArray arrayWithObject: NSURLIsDirectoryKey] error: &error];\n+\t\tif (properties == nil) {\n+\t\t\tif (![fileManager createDirectoryAtPath: [ald path]\n+\t\t\t      withIntermediateDirectories: YES attributes: nil error: &error]) {\n+\t\t\t\tNSLog(@\"Could not create directory %@\\n%@\",\n+\t\t\t\t      [ald path], [error localizedDescription]);\n+\t\t\t\tald = nil;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn ald;\n }\n \n +(BOOL)recycleFileAtPath:(NSString*)path{"
    },
    {
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBoxAppDelegate.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBoxAppDelegate.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBoxAppDelegate.m",
      "patch": "--- a/GBox/GBoxAppDelegate.m\n+++ b/GBox/GBoxAppDelegate.m\n@@ -417,7 +417,7 @@\n \n // the callbacks for GBNetworkStatusWatcherHandler\n - (void)networkConnected {\n-    NSLog(@\"network Connected\");\n+    NSLog(@\"Network Connected\");\n     if(![authController isSignedIn]&&setupFinished==YES){\n         [authController tryKeychainAuthenticaiton];\n     }\n@@ -426,7 +426,7 @@\n }\n \n - (void)networkDisconnected {\n-    NSLog(@\"network Disconnected\");\n+    NSLog(@\"Network Disconnected\");\n     //[syncController stopAlloperation];\n }\n "
    },
    {
      "status": "modified",
      "additions": 54,
      "deletions": 54,
      "changes": 108,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBoxConstants.h",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBoxConstants.h",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBoxConstants.h",
      "patch": "--- a/GBox/GBoxConstants.h\n+++ b/GBox/GBoxConstants.h\n@@ -8,88 +8,88 @@\n \n #import <Foundation/Foundation.h>\n \n-extern NSString* const kGBAuthenticationSucceed ;       \n-extern NSString* const kGBAuthFailed   ;       \n-extern NSString* const kGBDocListFetchSucceed ;  \n-extern NSString* const kGBFolderFeedFetchSucceed;\n-extern NSString* const kGBContactsListFetchSucceed;\n-extern NSString* const kGBMetaDataFetchSucceed;\n-extern NSString* const kGBACLShareFeedFetchSucceed;\n-extern NSString* const kGBDocChangeFeedFetchSucceed;\n-extern NSString* const kGBInitialDocChangeFeedFetchSucceed;\n-extern NSString* const kGBFileAttributeIdentifier;\n-extern NSString* const kGBIsInitialTimestampFetch;\n-extern NSString* const kGBFolderCreateSucceed;\n-extern NSString* const kGBSelectiveSyncFolders ;\n+extern NSString *const kGBAuthenticationSucceed;\n+extern NSString *const kGBAuthFailed;\n+extern NSString *const kGBDocListFetchSucceed;\n+extern NSString *const kGBFolderFeedFetchSucceed;\n+extern NSString *const kGBContactsListFetchSucceed;\n+extern NSString *const kGBMetaDataFetchSucceed;\n+extern NSString *const kGBACLShareFeedFetchSucceed;\n+extern NSString *const kGBDocChangeFeedFetchSucceed;\n+extern NSString *const kGBInitialDocChangeFeedFetchSucceed;\n+extern NSString *const kGBFileAttributeIdentifier;\n+extern NSString *const kGBIsInitialTimestampFetch;\n+extern NSString *const kGBFolderCreateSucceed;\n+extern NSString *const kGBSelectiveSyncFolders;\n \n typedef enum {\n-    kGBLocalNewFile = 1,\n-    kGBServerNewFile,\n+\tkGBLocalNewFile = 1,\n+\tkGBServerNewFile,\n \n-    kGBServerDeleteFile,\n-    kGBLocalDeleteFile,\n+\tkGBServerDeleteFile,\n+\tkGBLocalDeleteFile,\n \n-    kGBServerDeleteCollection,\n-    kGBLocalDeleteCollection,\n+\tkGBServerDeleteCollection,\n+\tkGBLocalDeleteCollection,\n \n-    kGBServerNewCollection,\n-    kGBLocalNewCollection,\n+\tkGBServerNewCollection,\n+\tkGBLocalNewCollection,\n \n-    kGBServerRemoveEntryFromCollection,\n-    \n-    kGBServerAddEntryToCollection,\n+\tkGBServerRemoveEntryFromCollection,\n \n-    kGBServerRename,\n-    kGBLocalRename,\n+\tkGBServerAddEntryToCollection,\n \n-    kGBServerFileUpdated,\n-    kGBLocalFileUpdated,\n+\tkGBServerRename,\n+\tkGBLocalRename,\n \n-    kGBLocalMoveEntry,\n-    \n-    kGBServerNoMD5ConflictedFileExist,\n+\tkGBServerFileUpdated,\n+\tkGBLocalFileUpdated,\n \n-    kGBFileExistPathsSubSet,\n-    \n-    kGBServerNoMD5FileExist,\n+\tkGBLocalMoveEntry,\n \n-    kGBSync,\n-    \n-    kGBLocalAddEntryToCollection,\n-    \n-    kGBLocalRemoveEntryFromCollection\n-    \n-} GBEventCode;\n+\tkGBServerNoMD5ConflictedFileExist,\n+\n+\tkGBFileExistPathsSubSet,\n+\n+\tkGBServerNoMD5FileExist,\n+\n+\tkGBSync,\n+\n+\tkGBLocalAddEntryToCollection,\n+\n+\tkGBLocalRemoveEntryFromCollection\n+}\n+GBEventCode;\n //The last 6 event code will never be detected, only used by internal handle logic in GBTaskHandler\n \n-extern NSString* const kGBFileAttributeMD5;\n+extern NSString *const kGBFileAttributeMD5;\n \n extern NSInteger const kGBStateDone;\n extern NSInteger const kGBStateExecuting;\n extern NSInteger const kGBStateWaiting;\n extern NSInteger const kGBStateCancel;\n \n-extern NSString* const kGBDownloadFinished;\n-extern NSString* const kGBDownloadFailed;\n-extern NSString* const kGBUploadFinished;\n-extern NSString* const kGBUploadFailed;\n+extern NSString *const kGBDownloadFinished;\n+extern NSString *const kGBDownloadFailed;\n+extern NSString *const kGBUploadFinished;\n+extern NSString *const kGBUploadFailed;\n \n-extern NSString* const kGBRemoveEntryFromCollectionFailed;\n+extern NSString *const kGBRemoveEntryFromCollectionFailed;\n \n-extern NSString * const kGB_DB_STORE_FILENAME; \n+extern NSString *const kGB_DB_STORE_FILENAME;\n \n \n-extern NSString* const kGBACLEntryAdded;\n+extern NSString *const kGBACLEntryAdded;\n \n-extern NSString* const kGBLargestChangestamp;\n+extern NSString *const kGBLargestChangestamp;\n \n-extern NSString* const kGBNotFoundMarker;\n+extern NSString *const kGBNotFoundMarker;\n \n-extern NSString* const kGBSetupFinished;\n+extern NSString *const kGBSetupFinished;\n \n-extern NSString* const kGBChangeAccount;\n+extern NSString *const kGBChangeAccount;\n \n-extern NSString * const kGBFileSystemWatcherLastEventIDKey;\n+extern NSString *const kGBFileSystemWatcherLastEventIDKey;\n \n @interface GBoxConstants : NSObject\n "
    },
    {
      "status": "modified",
      "additions": 41,
      "deletions": 42,
      "changes": 83,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBoxConstants.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBox/GBoxConstants.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBox/GBoxConstants.m",
      "patch": "--- a/GBox/GBoxConstants.m\n+++ b/GBox/GBoxConstants.m\n@@ -10,64 +10,63 @@\n #import \"GBUtility.h\"\n \n @implementation GBoxConstants\n-NSString* const kGBAuthenticationSucceed  = @\"kGBAuthenticationSucceed\";\n-NSString * const kGBAuthFailed = @\"kGBAuthFailed\";\n-NSString* const kGBDocListFetchSucceed = @\"kGBDocListFetchSucceed\"; \n-NSString* const kGBFolderFeedFetchSucceed=@\"GBFolderFeedFetchSucceed\";\n-NSString* const kGBContactsListFetchSucceed=@\"kGBContactsListFetchSucceed\";\n-NSString* const kGBMetaDataFetchSucceed = @\"kGBMetaDataFetchSucceed\";\n-NSString* const kGBACLShareFeedFetchSucceed =@\"kGBACLShareFeedFetchSucceed\";\n-NSString* const kGBDocChangeFeedFetchSucceed=@\"kGBDocChangeFeedFetchSucceed\";\n-NSString* const kGBFileAttributeIdentifier =@\"kGBFileAttributeIdentifier\";\n-NSString* const kGBIsInitialTimestampFetch = @\"isInitialTimestampFetch\";\n- NSString* const kGBInitialDocChangeFeedFetchSucceed = @\"kGBInitialDocChangeFeedFetchSucceed\";\n-NSString* const kGBFolderCreateSucceed= @\"kGBFolderCreateSucceed\";\n-\n-NSInteger const kGBStateDone=3;\n-NSInteger const kGBStateExecuting=2;\n-NSInteger const kGBStateWaiting=1;\n-NSInteger const kGBStateCancel=4;\n+NSString *const kGBAuthenticationSucceed  = @\"kGBAuthenticationSucceed\";\n+NSString *const kGBAuthFailed = @\"kGBAuthFailed\";\n+NSString *const kGBDocListFetchSucceed = @\"kGBDocListFetchSucceed\";\n+NSString *const kGBFolderFeedFetchSucceed = @\"GBFolderFeedFetchSucceed\";\n+NSString *const kGBContactsListFetchSucceed = @\"kGBContactsListFetchSucceed\";\n+NSString *const kGBMetaDataFetchSucceed = @\"kGBMetaDataFetchSucceed\";\n+NSString *const kGBACLShareFeedFetchSucceed = @\"kGBACLShareFeedFetchSucceed\";\n+NSString *const kGBDocChangeFeedFetchSucceed = @\"kGBDocChangeFeedFetchSucceed\";\n+NSString *const kGBFileAttributeIdentifier = @\"kGBFileAttributeIdentifier\";\n+NSString *const kGBIsInitialTimestampFetch = @\"isInitialTimestampFetch\";\n+NSString *const kGBInitialDocChangeFeedFetchSucceed = @\"kGBInitialDocChangeFeedFetchSucceed\";\n+NSString *const kGBFolderCreateSucceed = @\"kGBFolderCreateSucceed\";\n+\n+NSInteger const kGBStateDone = 3;\n+NSInteger const kGBStateExecuting = 2;\n+NSInteger const kGBStateWaiting = 1;\n+NSInteger const kGBStateCancel = 4;\n \n //NSInteger const kGBFileAttributeMD5=0;\n-NSInteger const kGBFileAttributeUpdatedTime=1;\n-NSInteger const kGBFileAttributeIsDirectory=2;\n+NSInteger const kGBFileAttributeUpdatedTime = 1;\n+NSInteger const kGBFileAttributeIsDirectory = 2;\n \n-NSString* const kGBFileAttributeMD5=@\"kGBFileAttributeMD5\";\n+NSString *const kGBFileAttributeMD5 = @\"kGBFileAttributeMD5\";\n \n-NSString* const kGBDownloadFinished=@\"kGBDownloadFinished\";\n-NSString* const kGBDownloadFailed=@\"kGBDownloadFailed\";\n+NSString *const kGBDownloadFinished = @\"kGBDownloadFinished\";\n+NSString *const kGBDownloadFailed = @\"kGBDownloadFailed\";\n \n-NSString* const kGBUploadFinished=@\"kGBUploadFinished\";\n-NSString* const kGBUploadFailed=@\"kGBUploadFailed\";\n+NSString *const kGBUploadFinished = @\"kGBUploadFinished\";\n+NSString *const kGBUploadFailed = @\"kGBUploadFailed\";\n \n-NSString* const kGBACLEntryAdded=@\"kGBACLEntryAdded\";\n+NSString *const kGBACLEntryAdded = @\"kGBACLEntryAdded\";\n \n-NSString* const kGBLargestChangestamp=@\"largestChangestamp\";\n+NSString *const kGBLargestChangestamp = @\"largestChangestamp\";\n \n-NSString* const kGBNotFoundMarker = @\"notFoundMarker#9987dfewfvrtqd8765dfeef78341\";\n+NSString *const kGBNotFoundMarker = @\"notFoundMarker#9987dfewfvrtqd8765dfeef78341\";\n \n-NSString* const kGBSetupFinished = @\"kGBSetupFinished---Alpha5\";\n+NSString *const kGBSetupFinished = @\"kGBSetupFinished---Alpha5\";\n \n-NSString * const kGB_DB_STORE_FILENAME = @\"gbdatamodel.xml\";\n+NSString *const kGB_DB_STORE_FILENAME = @\"gbdatamodel.xml\";\n \n-NSString* const kGBChangeAccount = @\"kGBChangeAccount\";\n+NSString *const kGBChangeAccount = @\"kGBChangeAccount\";\n \n-NSString* const kGBRemoveEntryFromCollectionFailed =  @\"kGBRemoveEntryFromCollectionFailed\";\n+NSString *const kGBRemoveEntryFromCollectionFailed =  @\"kGBRemoveEntryFromCollectionFailed\";\n \n-NSString* const kGBFSEventStreamEventId = @\"kGBFSEventStreamEventId\";\n+NSString *const kGBFSEventStreamEventId = @\"kGBFSEventStreamEventId\";\n \n-NSString * const kGBFileSystemWatcherLastEventIDKey = @\"GBFileSystemWatcherLastEventID\";\n+NSString *const kGBFileSystemWatcherLastEventIDKey = @\"GBFileSystemWatcherLastEventID\";\n \n-NSString* const kGBSelectiveSyncFolders = @\"GBoxSelectiveFolders\";\n+NSString *const kGBSelectiveSyncFolders = @\"GBoxSelectiveFolders\";\n \n-- (id)init\n-{\n-    self = [super init];\n-    if (self) {\n-        // Initialization code here.\n-    }\n-    \n-    return self;\n+- (id)init {\n+\tself = [super init];\n+\tif (self) {\n+\t\t// Initialization code here.\n+\t}\n+\n+\treturn self;\n }\n \n @end"
    },
    {
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "raw_url": "https://github.com/theplant/GBox/raw/918db942b7398eebb149967b670f0ec701db7dbd/GBoxTests/GBoxTests.m",
      "blob_url": "https://github.com/theplant/GBox/blob/918db942b7398eebb149967b670f0ec701db7dbd/GBoxTests/GBoxTests.m",
      "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
      "filename": "GBoxTests/GBoxTests.m",
      "patch": "--- a/GBoxTests/GBoxTests.m\n+++ b/GBoxTests/GBoxTests.m\n@@ -26,7 +26,7 @@\n     [super tearDown];\n }\n \n-- (void)testGBUtility\n+- (void)testGBUtility_setIdentifier\n {\n     NSString* value = @\"felix21212\";\n \n@@ -37,4 +37,9 @@\n                    [GBUtility identifierForFileAtPath:[GBUtility rootPath]]);\n }\n \n+- (void)testGBUtility_applicationLogDirectory {\n+\tSTAssertNotNil([[GBUtility applicationLogDirectory] absoluteString], @\"applicationLogDirectory is nil\");\n+}\n+\n+\n @end"
    }
  ],
  "committer": {
    "url": "https://api.github.com/users/sunfmin",
    "login": "sunfmin",
    "avatar_url": "https://secure.gravatar.com/avatar/d4a7c04ca87944e7fb06518fb64f9c36?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "id": 1014
  },
  "stats": {
    "additions": 428,
    "total": 856,
    "deletions": 428
  },
  "url": "https://api.github.com/repos/theplant/GBox/commits/918db942b7398eebb149967b670f0ec701db7dbd",
  "parents": [
    {
      "url": "https://api.github.com/repos/theplant/GBox/commits/2a422957d44f291233ac63482c97f005628713ad",
      "sha": "2a422957d44f291233ac63482c97f005628713ad"
    }
  ],
  "commit": {
    "committer": {
      "email": "sunfmin@gmail.com",
      "date": "2011-09-13T10:10:59-07:00",
      "name": "Felix Sun"
    },
    "url": "https://api.github.com/repos/theplant/GBox/git/commits/918db942b7398eebb149967b670f0ec701db7dbd",
    "message": "try to fix executeFetchRequest:error: A fetch request must have an entity. failed",
    "tree": {
      "url": "https://api.github.com/repos/theplant/GBox/git/trees/8e223335d697490e1f00789a96b4f9e88219347c",
      "sha": "8e223335d697490e1f00789a96b4f9e88219347c"
    },
    "author": {
      "email": "sunfmin@gmail.com",
      "date": "2011-09-13T10:10:59-07:00",
      "name": "Felix Sun"
    }
  },
  "sha": "918db942b7398eebb149967b670f0ec701db7dbd",
  "author": {
    "url": "https://api.github.com/users/sunfmin",
    "login": "sunfmin",
    "avatar_url": "https://secure.gravatar.com/avatar/d4a7c04ca87944e7fb06518fb64f9c36?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
    "id": 1014
  }
}
